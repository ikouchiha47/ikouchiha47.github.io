<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ikouchiha47.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ikouchiha47.github.io/" rel="alternate" type="text/html" /><updated>2024-10-24T17:18:46+05:30</updated><id>https://ikouchiha47.github.io/feed.xml</id><title type="html">iko’s logs</title><subtitle>Yet another platform enginner, with a love for designing systems, writing tools, and hating third-party api integrations.</subtitle><author><name>ikouchiha47</name></author><entry><title type="html">Pairy</title><link href="https://ikouchiha47.github.io/2024/10/24/pairy.html" rel="alternate" type="text/html" title="Pairy" /><published>2024-10-24T05:30:00+05:30</published><updated>2024-10-24T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/10/24/pairy</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/10/24/pairy.html"><![CDATA[<p><a href="https://github.com/ikouchiha47/pairy">github</a></p>

<h1 id="pairy">Pairy</h1>

<p>The problem of sharing just code always remained. There has been
multiple solutions over the years, infact <a href="https://zed.dev/">Zed</a> comes with an
inbuilt click to pair option.</p>

<p>The problem however, you have to sign-in. So <strong>fuck that</strong>.</p>

<h2 id="base-idea">Base idea</h2>

<p>Implementing a full fledged real time collaboration is tough. <code class="language-plaintext highlighter-rouge">CRDT</code> is the go-to
solution in most cases. <code class="language-plaintext highlighter-rouge">Operational Transform</code> is another option, but one needs
to define those transforms. Open up any open source library, and you can find filessss. <code class="language-plaintext highlighter-rouge">_|_</code></p>

<p>However, I was more interested in a simpler working solution. The idea is simple:</p>

<ul>
  <li>Have a server to handle clients, (and future extensions on features like auth, discover-ability and stuff)</li>
  <li>Have both the participants on the same network, achieved with <code class="language-plaintext highlighter-rouge">zerotier</code>.</li>
  <li>Communicate the <code class="language-plaintext highlighter-rouge">mode</code> and <code class="language-plaintext highlighter-rouge">input</code> between the participants, and update the whole buffer.</li>
</ul>

<p>Right now, the system works like so:</p>

<ul>
  <li>One has to provide the remote ip address, for lua to connect.</li>
  <li>This is where lua sends the data to.</li>
  <li>Connect with the local hosted server</li>
  <li>This is where the golang receives the data from.</li>
  <li>Upon receiving the data update the current file/buffer.</li>
  <li>Before sending or re-rendering, it does a hash comparison to detect changes.</li>
</ul>

<h2 id="improvements">Improvements</h2>

<p>Although I am not looking to make huge improvements anytime soon, with CRDTs, there
are however a set of things that I will do.</p>

<ul>
  <li>Handle the states, <code class="language-plaintext highlighter-rouge">receiving</code>, <code class="language-plaintext highlighter-rouge">sending</code>, <code class="language-plaintext highlighter-rouge">typing</code>, to manage the sync better.</li>
  <li>Anytime someone is <code class="language-plaintext highlighter-rouge">typing</code>, prevent, any <code class="language-plaintext highlighter-rouge">updates</code>.</li>
  <li>Start the sync process only when in <code class="language-plaintext highlighter-rouge">receiving</code> or <code class="language-plaintext highlighter-rouge">sending</code> mode</li>
  <li>Show mismatch with options, like a <code class="language-plaintext highlighter-rouge">three way merge</code></li>
  <li>Rn participants need to be on the same network, would add a hosted service as well.</li>
</ul>

<h2 id="internals">Internals</h2>

<p>The golang server is rn a dumb operator forwarding the received data to lua.
There is no concept of EOF here, so the buffer is read until ‘\n’.
The lua end is where some hacky things happen.</p>

<p>Now in a text a new-line <code class="language-plaintext highlighter-rouge">\n</code> can occur, between sentences, so while sending
the data we need to do some hacky shit. With a <code class="language-plaintext highlighter-rouge">crdt</code>, we would be sending
the data wrapped in some other data, so this problem won’t arise.</p>

<p>But fear not, the answer right now is simple.
<code class="language-plaintext highlighter-rouge">Replace the \n with \xn and then add a \n in the end</code>.</p>

<p>The data is sent using a line protocol, cause <code class="language-plaintext highlighter-rouge">_|_ json parsing</code>.</p>

<p>The format is: <code class="language-plaintext highlighter-rouge">mode|whatever</code></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">{</span>
  <span class="n">message</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">reader</span><span class="o">.</span><span class="n">ReadString</span><span class="p">(</span><span class="sc">'\n'</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="k">break</span>
  <span class="p">}</span>

  <span class="n">log</span><span class="o">.</span><span class="n">Print</span><span class="p">(</span><span class="s">"Received:"</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>

  <span class="n">slicendice</span><span class="o">.</span><span class="n">Map</span><span class="p">(</span><span class="n">filteredClients</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">client</span> <span class="n">net</span><span class="o">.</span><span class="n">Conn</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">client</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">message</span><span class="p">))</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="nc">M</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="c1">-- compare hashes</span>
  <span class="kd">local</span> <span class="n">currHash</span> <span class="o">=</span> <span class="n">md5</span><span class="p">.</span><span class="n">sum</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">M</span><span class="p">.</span><span class="n">prevHash</span> <span class="o">==</span> <span class="n">currHash</span> <span class="k">then</span>
    <span class="k">return</span>
  <span class="k">end</span>

  <span class="n">M</span><span class="p">.</span><span class="n">prevHash</span> <span class="o">=</span> <span class="n">currHash</span>

  <span class="c1">-- get the mode and data</span>
  <span class="kd">local</span> <span class="n">mode</span><span class="p">,</span> <span class="n">line</span> <span class="o">=</span> <span class="n">data</span><span class="p">:</span><span class="n">match</span><span class="p">(</span><span class="s2">"^(%a)|(.+)$"</span><span class="p">)</span>

  <span class="c1">-- replace the \\xn with new-lines, for the in-text line breaks</span>
  <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">:</span><span class="nb">gsub</span><span class="p">(</span><span class="sr">"</span><span class="se">\\</span><span class="sr">xn"</span><span class="p">,</span> <span class="sr">"</span><span class="se">\n</span><span class="sr">"</span><span class="p">)</span>

  <span class="c1">-- handle the modes</span>
  <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="s2">"i"</span> <span class="k">then</span>
    <span class="n">vim</span><span class="p">.</span><span class="n">schedule</span><span class="p">(</span><span class="k">function</span><span class="p">()</span>
      <span class="kd">local</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">vim</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">,</span> <span class="p">{</span> <span class="n">trimempty</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
      <span class="kd">local</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_get_current_buf</span><span class="p">()</span>

      <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_buf_set_lines</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="n">lines</span><span class="p">)</span>
    <span class="k">end</span><span class="p">)</span>

    <span class="c1">-- other modes</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nc">M</span><span class="p">.</span><span class="nf">currentBuffer</span><span class="p">()</span>
  <span class="kd">local</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">vim</span><span class="p">.</span><span class="n">api</span><span class="p">.</span><span class="n">nvim_buf_get_lines</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
  <span class="kd">local</span> <span class="n">buffer_string</span> <span class="o">=</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s2">"</span><span class="se">\\</span><span class="s2">xn"</span><span class="p">)</span> <span class="c1">-- as discussed above</span>

  <span class="k">if</span> <span class="n">buffer_string</span> <span class="o">==</span> <span class="s2">""</span> <span class="k">then</span>
    <span class="k">return</span> <span class="s2">""</span>
  <span class="k">end</span>

  <span class="k">return</span> <span class="s2">"i|"</span> <span class="o">..</span> <span class="n">buffer_string</span>
<span class="k">end</span>
</code></pre></div></div>

<p>– vim: ts=2 sts=2 sw=2 et</p>

<h3 id="thanks">thanks</h3>

<p>until next time, ladies.</p>]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[simple enough two person remote pair programing setup]]></summary></entry><entry><title type="html">beetledb</title><link href="https://ikouchiha47.github.io/2024/07/10/building-a-storage-engine.html" rel="alternate" type="text/html" title="beetledb" /><published>2024-07-10T05:30:00+05:30</published><updated>2024-07-10T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/07/10/building-a-storage-engine</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/07/10/building-a-storage-engine.html"><![CDATA[<h1 id="wassap">Wassap</h1>

<p>Why build another database? Well, to learn a bit more on databases, and it’s pretty daunting.
I reckon <strong>it would be fun</strong>.</p>

<h1 id="sqlite-love">Sqlite Love</h1>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
*/</span>
</code></pre></div></div>

<p>– form <a href="https://github.com/sqlite/sqlite/blob/master/src/btreeInt.h">btreeInt.h</a></p>

<p>The initial inspiration comes from <a href="https://www.sqlite.org/whentouse.html">sqlite3</a>. There is more to the database.</p>

<ul>
  <li><a href="https://www.sqlite.org/wal.html">WAL</a> mode.</li>
  <li>BEGIN vs BEGIN IMMEDIATE</li>
  <li><a href="https://www.sqlite.org/pragma.html#pragma_synchronous">Durability Tradeoff</a></li>
  <li>Other <code class="language-plaintext highlighter-rouge">PRAGMA</code> directives:
    <ul>
      <li>Capping log file size</li>
      <li>Increasing page cache size</li>
      <li>Enabling memory mapping</li>
    </ul>
  </li>
</ul>

<p>fly.io has a good <a href="https://fly.io/blog/sqlite-internals-wal/">article</a> on efficiently using WAL mode.</p>

<p><em>We have seen memory mapping before in our emulator as well. Instead of copying the data from disk to application memory space, only the address is passed along.</em></p>

<p><strong>This blog is a work in progress. Additions would be made as I progress further</strong></p>

<h2 id="seeding">Seeding</h2>

<p>First steps:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/sqlite/sqlite.git

sqlite test.sqlite3
</code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="n">users</span> <span class="p">(</span>
        <span class="n">id</span> <span class="nb">INTEGER</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTOINCREMENT</span><span class="p">,</span>
        <span class="n">username</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span>
        <span class="n">email</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span>
    <span class="p">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">_populate.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sqlite3</span>
<span class="kn">import</span> <span class="n">random</span>
<span class="kn">import</span> <span class="n">string</span>


<span class="c1"># Function to generate random usernames and emails
</span><span class="k">def</span> <span class="nf">generate_random_user</span><span class="p">():</span>
    <span class="n">username</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">choices</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_lowercase</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">8</span><span class="p">))</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">username</span> <span class="o">+</span> <span class="sh">"</span><span class="s">@mail.com</span><span class="sh">"</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span>


<span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="sh">"</span><span class="s">test.sqlite3</span><span class="sh">"</span><span class="p">)</span>
<span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">100000</span>

<span class="n">users_to_insert</span> <span class="o">=</span> <span class="p">[</span><span class="nf">generate_random_user</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>

<span class="c1"># Use executemany for batch insertion
</span><span class="n">cursor</span><span class="p">.</span><span class="nf">executemany</span><span class="p">(</span><span class="sh">"</span><span class="s">INSERT INTO users (username, email) VALUES (?, ?)</span><span class="sh">"</span><span class="p">,</span> <span class="n">users_to_insert</span><span class="p">)</span>

<span class="c1"># Commit the changes and close the connection
</span><span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Inserted </span><span class="si">{</span><span class="n">N</span><span class="si">}</span><span class="s"> user records successfully.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>We run this, and then open the file with any <code class="language-plaintext highlighter-rouge">hex editor</code>. (VScode has an extension to read it).</p>

<p>Head over to the <a href="https://fly.io/blog/sqlite-internals-btree/">sqlite’s btree internals</a>. This and the WAL mode article above by fly.io, would give a pretty high level idea of what to deal with.</p>

<p>Database engines generally generate bytecode, which is then translated to equivalent machine instructions.
But my idea is to see, if we can eliminate that.</p>

<h2 id="detour">Detour</h2>

<p>Aaaaannyyyyeeewhooo. On other news. I recently got diagonised with the cliced <code class="language-plaintext highlighter-rouge">ADD</code> and <code class="language-plaintext highlighter-rouge">Social Anxiety Disorder</code>. I mean, at this point I am not really surprised, anyone who knows me, can pretty much vouch for my anxiety. The anxiety mostly comes from knowing what’s the other person is grade me on what I say. I am also quite self-critical.</p>

<p>There is no shame in admitting that success pretty much defines who I am. So not only I am judging myself, I am also thinking of what I said, and how it didn’t go the way I wanted to, and hence I am a failure. I wish it was some other way.</p>

<p>I got my <code class="language-plaintext highlighter-rouge">ADD</code> in control though, coz a man’s gotta live. I have things in place to keep me sane. Of late, writing has helped slow down the thinking, although drawing is faster than writing. Sometimes there are so many variables to an asked question, that I just freeze and stare stupidly. As to help, I can do that to myself, has always been there.</p>

<p>The only good thing about all this. I got addicted to the computer and with its ups and down it has fed me and kept me alive, for me to do other stuff. (If you couldn’t tell my now, other stuff is a constant in my life.)</p>

<p><a href="https://www.youtube.com/watch?v=FUj3-B4yI8U">Dr. K</a> videos have been helpful. But I already had some of them figured out.</p>

<p><strong>Those who help themselves, end up helping themselves and some more.</strong></p>

<h1 id="more-sqlite-love">More sqlite love</h1>

<p>This exercise, atleast for me, requires a whole lot of reading. So here is the list:</p>

<ul>
  <li><a href="https://www.sqlite.org/arch.html">sqlite architecture</a></li>
  <li><a href="https://www.compileralchemy.com/books/sqlite-internals/">a guy explaining the by example</a></li>
  <li><a href="https://sqlite.org/src4/doc/trunk/www/bt.wiki">b-tree pages</a>
There are index and data pages, and there is also a concept of overflow pages.</li>
  <li><a href="https://www.oreilly.com/library/view/database-internals/9781492040330/">a good damn book</a>
This is again a whole lot of reading, but then you understand different types of indexes.</li>
</ul>

<h3 id="a-bit-about-indexes">A bit about indexes</h3>

<p><a href="https://en.wikipedia.org/wiki/B%2B_tree">Wikipedia</a> is the best source.</p>

<div class="preview-wrapper">
  <div class="preview-wrapper-inner">
    <div class="preview-content">
      <div class="preview-image">
        <a href="https://en.wikipedia.org/wiki/File:Bplustree.png" target="_blank" class="preview-img-wrapper">
          <img src="https://upload.wikimedia.org/wikipedia/commons/3/37/Bplustree.png" />
        </a>
      </div>

      <div class="preview-body">
        <h2 class="preview-title">
          <a href="https://en.wikipedia.org/wiki/File:Bplustree.png" target="_blank">File:Bplustree.png - Wikipedia</a>
        </h2>
        <div class="preview-description"></div>
        <div class="preview-footer">
          <a href="//en.wikipedia.org" target="_blank">en.wikipedia.org</a>
        </div>
      </div>
    </div>
  </div>
</div>

<p>Well, uptil now this has been my understanding. There are two popular indexing strategies that are used.
In terms of b+tree, the <code class="language-plaintext highlighter-rouge">intermediate nodes</code> are used to point to the child nodes.</p>

<p><code class="language-plaintext highlighter-rouge">child nodes</code> are mostly like <code class="language-plaintext highlighter-rouge">router nodes</code>, used to keep the tree balanced, by ensuring each node has
optimal amount of keys.</p>

<p>A <code class="language-plaintext highlighter-rouge">leaf node</code> is where database generally stores its data, rest all are used for quick lookup, depending on
indexes. In some databases, if you don’t have a <code class="language-plaintext highlighter-rouge">primary key</code> the database <code class="language-plaintext highlighter-rouge">internally</code> creates one.
_How else, is it supposed to build the b+tree__</p>

<p>So, basically, you have a <code class="language-plaintext highlighter-rouge">key</code>/<code class="language-plaintext highlighter-rouge">rowid</code> and then the <code class="language-plaintext highlighter-rouge">value</code>. And keys are ordered. Great job.</p>

<h4 id="two-bits-on-fragmentation">two bits on fragmentation</h4>

<p>Deletions involving strcutured data isn’t instanteneous. In an ideal would, insertion and deletion should
retrigger some sort of rebalancing. But this rebalancings are time consuming. Hence most times, they are
marked as deleted.</p>

<p>Once we have a couple of deletions and updates, it’s fairly possible that we can end up with wasted space.
During a DML, if the page size is full, or the size of the data doesn’t fit the available page width,
the kernel has to now involve the MMU to get a page allocation.</p>

<p>This new page, can be a different part of the memory bank/sector, and hence, will require page jumps/inderections. (Not contigiiiuuous).</p>

<p>All this leads to what people called a <code class="language-plaintext highlighter-rouge">fragmented state</code>.</p>

<h4 id="clustered-index">clustered index</h4>

<p>Here, the values are stored along with keys. And the other secondary indexes point to the primary index.
This means, lookups using <code class="language-plaintext highlighter-rouge">primary keys</code> are pretty fast.</p>

<p>But for secondary indexes, it has to go via the primary key, so 2 lookups to get 1 data.</p>

<p><a href="https://dev.mysql.com/doc/refman/8.4/en/storage-engines.html">Mysqueel’s InnoDB</a> is our warlord here.
ISAM behaves more like sqlite in default/journal mode, where for inserts and updates,
it locks the entire table.
Secondary indexes will have their own b+ tree.</p>

<p>My understanding roughly is, inside the leaf nodes, the data is kept in sorted order.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Primary B+ Tree:
     [10]
    /    \
 [1-5]  [11-15]
Leaf nodes contain: (1, row data), (2, row data), ..., (15, row data)
</code></pre></div></div>

<p>So, for insertion, first it needs to find the right page, in <code class="language-plaintext highlighter-rouge">log N</code> time.
Depending on if the page is full or not, the page is split and hence across pages
the ordering is maintained. So within a page,</p>

<p><strong>RANGE Queries are pretty efficient, and so is Search</strong></p>

<p>And somehow having ordered heap reduces fragmentation. Although MySQL advises you to run <code class="language-plaintext highlighter-rouge">OPTIMIZE ...</code>, to
reclaim and re-organise the data pages, and bring them closer.</p>

<p><strong>More contiguous than the last time</strong></p>

<h4 id="non-clustered-index">non-clustered index</h4>

<p>Rather called it secondary indexes, where there is always an <code class="language-plaintext highlighter-rouge">internal id</code>, and it points to a <code class="language-plaintext highlighter-rouge">tuple</code>.
The <code class="language-plaintext highlighter-rouge">tuple</code> is a combination of the <code class="language-plaintext highlighter-rouge">(page_number, page_offset)</code> on disk, much like how it works with filesystems
in general.
The data is loaded in the buffer cache, at various stages of execution.</p>

<p>The <code class="language-plaintext highlighter-rouge">secondary indexes</code> too, point to the same <code class="language-plaintext highlighter-rouge">tuple_id</code>. And <code class="language-plaintext highlighter-rouge">UPDATEs</code> and more like <code class="language-plaintext highlighter-rouge">INSERTs</code>.</p>

<p><strong>Postgres</strong> is what does this.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Index B+ Tree:
     [10]
    /    \
 [1, TID1-5, TID5]  [11, TID11-15, TID15]
Leaf nodes contain: (1, TID1), (2, TID2), ..., (15, TID15)

Heap:
Page 1: {TID1: (1, row data), TID2: (2, row data), ..., TID5: (5, row data)}
Page 2: {TID11: (11, row data), ..., TID15: (15, row data)}
</code></pre></div></div>

<p>Since the data in the leaf is not ordered like in case of Mysql or sqlite, the insertion process
doesn’t need to find the proper data page.</p>

<p><strong>SELECTs on secondar indexes are therefore faster</strong>,</p>

<p>This however causes a problem, that the data on disk is not contigious. (Although I am not really sure, aside from using <code class="language-plaintext highlighter-rouge">bitmaps</code> are there any optimizations they use, this is just theoritical understanding from the book).
And “theoritically” it makes __RANGE queries slower compared to clusted indexes.</p>

<p>So, something, like using 8bit blocks to represent integer keys, so for a 32bit, divided in 4 blocks.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let block = num / 8;
let offset = num % 8;

file.seek(block, 0).read(&amp;byte)

byte = byte | (1 &lt;&lt; offset)
// 1 &lt;&lt; offset, would move the 1 to the left offset number of time
// and the | would set it to 1, indicating its present.
</code></pre></div></div>

<p>The other problem is in case of <strong>UPDATES</strong> if there are secondary indexes, and the tuple_id changes, all those
secondary indexes has to be updated.</p>

<p>Overall, non-clustered indexes perform good for range based queries, and queries which rely more on <code class="language-plaintext highlighter-rouge">PRIMARY</code> keys. Updates are bad for either of them, in their own way, one can only benchmark to choose.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
This is no way to choose a database. Over a handfull of database blogs and newsletters,
I have realized this, if you don't have any specific requirement for a fancy database,
these days, most SQL databases can scale properly, if you get the topology right. There
are plethora of extensions and plugins available.

Both of them will sometimes call you up at night. All databases suffer from replication issues,
and everything is a work-around to keep the C-A-P on.
Your qouroum can fail as much as a semi-synchronous replica going down.

I think in the end it boils down to having the expertise or willingness to work the issues.

Figma and Discord are two contrasting example, (although they are in different points of time).
Discords speciality is database migration, they can create a cloud service to do that.
Figma on the other hand scaled their SQL database and wrote some cool tools and built the ecosystem.

Your data model means shit to me. At college we thought everything should be in 4NF.
</code></pre></div></div>

<h3 id="get-to-work">Get to work</h3>

<p>There are a couple of things that needed to be done. And I will try to break them down. The code is on <a href="https://github.com/ikouchiha47/brainiac/tree/master/beetledb">github</a>.</p>

<p>The language of choice is <a href="https://learnxinyminutes.com/docs/zig/">Zig</a>. And the fastest way to learn zig, is still, <code class="language-plaintext highlighter-rouge">writing an emulator</code>.</p>

<ul>
  <li>Write a parser for a subset of <code class="language-plaintext highlighter-rouge">CREATE</code>, <code class="language-plaintext highlighter-rouge">SELECT</code> and <code class="language-plaintext highlighter-rouge">INSERT</code> (done)</li>
  <li>Try to just save a simple b+ tree in file.</li>
  <li>Use the WAL log mode from start</li>
  <li>Try to use LSM tree, as a part of a pluggable storage engine</li>
  <li>Try to implement a geo-database storage engine.</li>
</ul>

<h2 id="skiplist">SkipList</h2>

<p>Well after much thought I realized, instead of going for a btree first, lets try saving a skiplist to file. A skiplist, is an in memory data format, a sorted linked list
containing levels, So starting at the highest level, imagine playing snake and ladder. Travel horizontally to find an element greater than the target value,
and then move one level down, for finer grained. Since we are skipping some elements, from finding the next greater node at the higer levels. So instead of going
through this list [1,2,3,4,5], to find 4, lets say the max_level, has 3, in its list, so you have skipped, 1 and 2.</p>

<p>At the base level, the probability of any node to be found is 1. And it decreases up the level. The insert implementation goes, like:</p>
<ul>
  <li>traversing the levels to find the place where the value needs to be inserted (target node).</li>
  <li>finding a new level for the new node to be inserted, and pointer them to head node</li>
  <li>treating it like a linked list, insert the node infront of the target node.</li>
</ul>

<p>Below is a brief implementation in python:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Self</span>
<span class="kn">import</span> <span class="n">random</span>
<span class="kn">import</span> <span class="n">struct</span>


<span class="k">class</span> <span class="nc">SkipNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">max_level</span><span class="o">=</span><span class="mi">16</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
        <span class="n">self</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">max_level</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">self</span><span class="p">.</span><span class="n">forwards</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Self</span> <span class="o">|</span> <span class="bp">None</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">max_level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_bytes</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">()</span>
        <span class="n">name_encoded</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">value_encoded</span> <span class="o">=</span> <span class="mh">0xFFFF</span> <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">self</span><span class="p">.</span><span class="n">value</span>

        <span class="c1"># I has a standard size of 4bytes , so maybe to_bytes of 4 is not needed
</span>        <span class="n">result</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;I</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="p">)))</span>  <span class="c1"># key length
</span>        <span class="n">result</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">name_encoded</span><span class="p">)</span>  <span class="c1"># key
</span>        <span class="n">result</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;I</span><span class="sh">"</span><span class="p">,</span> <span class="n">value_encoded</span><span class="p">))</span>  <span class="c1"># value
</span>        <span class="n">result</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;I</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">level</span><span class="p">))</span>  <span class="c1"># level
</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_bytes</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="n">key_len</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">unpack_from</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;I</span><span class="sh">"</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">offset</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1"># or &lt;4b
</span>        <span class="n">offset</span> <span class="o">+=</span> <span class="mi">4</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">offset</span> <span class="p">:</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">key_len</span><span class="p">].</span><span class="nf">tobytes</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">offset</span> <span class="o">+=</span> <span class="n">key_len</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">unpack_from</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;I</span><span class="sh">"</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">offset</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">offset</span> <span class="o">+=</span> <span class="mi">4</span>
        <span class="n">lvl</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">unpack_from</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;I</span><span class="sh">"</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">offset</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

        <span class="k">return</span> <span class="nc">SkipNode</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">value</span> <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="mh">0xFFFF</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span> <span class="n">max_level</span><span class="o">=</span><span class="n">lvl</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="p">)</span>


<span class="k">class</span> <span class="nc">SkipList</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">max_level</span><span class="p">,</span> <span class="n">probab</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">max_level</span> <span class="o">=</span> <span class="n">max_level</span>
        <span class="n">self</span><span class="p">.</span><span class="n">probab</span> <span class="o">=</span> <span class="n">probab</span>
        <span class="n">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="nc">SkipNode</span><span class="p">(</span><span class="sh">"</span><span class="s">head</span><span class="sh">"</span><span class="p">,</span> <span class="n">max_level</span><span class="o">=</span><span class="n">max_level</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">_random_level</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">level</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">max_level</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">level</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">max_level</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">max_level</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">level</span>
        <span class="c1"># level = 0
</span>        <span class="c1"># while random.random() &lt; self.probab and level &lt; self.max_level:
</span>        <span class="c1">#     level += 1
</span>        <span class="c1"># return level
</span>
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="c1"># starting from max level
</span>        <span class="c1"># find the position for update
</span>        <span class="n">curr</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        <span class="k">if</span> <span class="n">curr</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">Exception</span><span class="p">(</span><span class="sh">"</span><span class="s">Empty</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">updates</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SkipNode</span> <span class="o">|</span> <span class="bp">None</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">max_level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

        <span class="c1"># iterate the head to find the levels
</span>        <span class="c1"># to insert the node at
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">level</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">while</span> <span class="n">curr</span> <span class="ow">and</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">and</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">value</span><span class="p">:</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

            <span class="n">updates</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">curr</span>

        <span class="n">new_lvl</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_random_level</span><span class="p">()</span>

        <span class="c1"># check if lvl &gt; self.max_levels
</span>        <span class="c1"># then track new lanes to create for head
</span>        <span class="k">if</span> <span class="n">new_lvl</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">level</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">new_lvl</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">updates</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
            <span class="n">self</span><span class="p">.</span><span class="n">level</span> <span class="o">=</span> <span class="n">new_lvl</span>


        <span class="n">node</span> <span class="o">=</span> <span class="nc">SkipNode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">value</span><span class="p">,</span> <span class="n">max_level</span><span class="o">=</span><span class="n">new_lvl</span><span class="p">)</span>
        <span class="c1"># add the nodes at all levels, starting from 0
</span>        <span class="c1"># add the new nodes to the head node as well
</span>        <span class="k">for</span> <span class="n">lvl</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">new_lvl</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">replacing</span> <span class="o">=</span> <span class="n">updates</span><span class="p">[</span><span class="n">lvl</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">replacing</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">warning: no entry found in updates</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">continue</span>

            <span class="n">node</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">lvl</span><span class="p">]</span> <span class="o">=</span> <span class="n">replacing</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">lvl</span><span class="p">]</span>
            <span class="n">replacing</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">lvl</span><span class="p">]</span> <span class="o">=</span> <span class="n">node</span>

        <span class="n">self</span><span class="p">.</span><span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">return</span> <span class="n">self</span>

    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="c1"># check at each level starting from the maximum
</span>        <span class="n">curr</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">level</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">while</span> <span class="n">curr</span> <span class="ow">and</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">and</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">value</span><span class="p">:</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">curr</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="c1"># precautionary
</span>        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">curr</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">curr</span><span class="p">.</span><span class="n">value</span> <span class="o">==</span> <span class="n">value</span>

    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
        <span class="n">updates</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SkipNode</span> <span class="o">|</span> <span class="bp">None</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">max_level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">level</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">while</span> <span class="n">curr</span> <span class="ow">and</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">and</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">value</span><span class="p">:</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">updates</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">curr</span>

        <span class="k">if</span> <span class="n">curr</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="p">(</span><span class="n">curr</span> <span class="ow">and</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">curr</span> <span class="ow">and</span> <span class="n">curr</span><span class="p">.</span><span class="n">value</span> <span class="o">!=</span> <span class="n">value</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">max_level</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">replacement</span> <span class="o">=</span> <span class="n">updates</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">replacement</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="n">replacement</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">curr</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">Exception</span><span class="p">(</span><span class="sh">"</span><span class="s">node_mismatch</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">replacement</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

        <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">level</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">max_level</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">level</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="n">self</span><span class="p">.</span><span class="n">size</span> <span class="o">-=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">print_list</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
        <span class="kn">import</span> <span class="n">json</span>

        <span class="n">result</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">level</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">level</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">head</span>
            <span class="n">level_repr</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">while</span> <span class="n">curr</span><span class="p">:</span>
                <span class="n">level_repr</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">curr</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="n">curr</span><span class="p">.</span><span class="n">value</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="n">forwards</span><span class="p">[</span><span class="n">level</span><span class="p">]</span>
            <span class="n">result</span><span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="s">Level </span><span class="si">{</span><span class="n">level</span><span class="si">}</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">level_repr</span>

        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">first</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">skipnode</span> <span class="o">=</span> <span class="nc">SkipNode</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">skipnode</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">()</span>

    <span class="n">SkipNode</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="nf">memoryview</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">skplist</span> <span class="o">=</span> <span class="nc">SkipList</span><span class="p">(</span><span class="n">max_level</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">probab</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
    <span class="n">skplist</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">).</span><span class="nf">insert</span><span class="p">(</span><span class="sh">"</span><span class="s">b</span><span class="sh">"</span><span class="p">,</span> <span class="mi">20</span><span class="p">).</span><span class="nf">insert</span><span class="p">(</span><span class="sh">"</span><span class="s">c</span><span class="sh">"</span><span class="p">,</span> <span class="mi">15</span><span class="p">).</span><span class="nf">insert</span><span class="p">(</span><span class="sh">"</span><span class="s">d</span><span class="sh">"</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
    <span class="n">skplist</span><span class="p">.</span><span class="nf">print_list</span><span class="p">()</span>
    
    <span class="n">nodes</span><span class="p">:</span> <span class="n">Set</span><span class="p">[</span><span class="n">SkipNode</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="n">queue</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SkipNode</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">skplist</span><span class="p">.</span><span class="n">head</span><span class="p">]</span>
    
    <span class="k">while</span> <span class="nf">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">nodes</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    
        <span class="n">queue</span><span class="p">.</span><span class="nf">extend</span><span class="p">([</span><span class="n">fwd</span> <span class="k">for</span> <span class="n">fwd</span> <span class="ow">in</span> <span class="n">n</span><span class="p">.</span><span class="n">forwards</span> <span class="k">if</span> <span class="n">fwd</span><span class="p">])</span>
    
    <span class="nf">print</span><span class="p">(</span><span class="n">skplist</span><span class="p">.</span><span class="n">level</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">skplist</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="mi">15</span><span class="p">),</span> <span class="n">skplist</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="mi">40</span><span class="p">))</span>
</code></pre></div></div>

<h4 id="how-data-is-written-in-the-btree-in-sqlite">How data is written in the btree in sqlite.</h4>

<p>In <code class="language-plaintext highlighter-rouge">btree.c#L4267</code> and <code class="language-plaintext highlighter-rouge">btree.c#L4339</code>, From the comments, (operating in rollback journal mode I assume). Has 2 phases of commit:</p>

<ul>
  <li>Journal file creation with original state of db, and saving on disk, holding locks (indicating changes not yet done)</li>
  <li>The paging unit gets involved in this writing to disk.</li>
  <li>After, flushed to disk, zero out the journal headers indicating data is succesfully written, before droping the lock</li>
</ul>

<p>The b+tree talks to the paging layer. And the paging unit to disk.</p>

<p>The database has commited, only when the state on disk and in memory is the same, otherwise its dirty.</p>

<h2 id="data-oriented-design">Data Oriented Design</h2>

<p>Alignment and Size of a struct matters in case of struct packing. Why is u32 4bytes? Well because that 64bit processor can do efficiently,
A 64bit cpu can load 64bits of data in memory at a time. So u64 is 8bytes, and so u32 is 4bytes. Or 1 WORD.</p>

<h4 id="why-alignment-matters">Why Alignment matters</h4>

<ul>
  <li>CPUs are designed to read data from memory in chunks that are aligned to their size. 
For example, a u32 (4 bytes) is most efficiently accessed when it starts at a memory address that is a multiple of 4.</li>
  <li>A u64 (8 bytes) is most efficiently accessed when it starts at a memory address that is a multiple of 8.</li>
  <li>If data is misaligned (not on these boundaries), the CPU might need multiple memory operations to read or write the data, which can significantly slow down performance.</li>
</ul>

<p>So, when the struct has an alignment of u32, u64, u32., with alignment as 8 bytes.</p>

<ul>
  <li>u32, so multiples of 4. but <strong>alignment</strong> needs to be 8 bytes. so, 4 extra bytes needed to pad.</li>
  <li>so processor can load the memory is 8byte chunks, to avoid sequential access, to figure out boundaries.</li>
</ul>

<p>compared to a, u32, u32, u64. The processor can load 8, bytes of memory twice, to get all the data.</p>

<div class="language-zig highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Enemies</span> <span class="p">{</span>
  <span class="n">color</span><span class="p">:</span> <span class="kt">u32</span><span class="p">,</span>
  <span class="n">power</span><span class="p">:</span> <span class="kt">u64</span><span class="p">,</span>
  <span class="n">boost</span><span class="p">:</span> <span class="kt">u32</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p>So, the above has an alignment of 8, but a size of 8x3 = 24.</p>

<div class="language-zig highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Enemies</span> <span class="p">{</span>
  <span class="n">color</span><span class="p">:</span> <span class="kt">u32</span><span class="p">,</span>
  <span class="n">boost</span><span class="p">:</span> <span class="kt">u32</span><span class="p">,</span>
  <span class="n">power</span><span class="p">:</span> <span class="kt">u64</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p>This way, Alignment satisfies. It’s still 8, But since, the two u32s are packed together,
The procesor can read, 64bits only twice. And hence, a size <code class="language-plaintext highlighter-rouge">16</code>.</p>

<p>This gets worse, when we use bool to represent stuff.</p>

<div class="language-zig highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Enemies</span> <span class="p">{</span>
  <span class="n">color</span><span class="p">:</span> <span class="kt">u32</span><span class="p">,</span>
  <span class="n">boost</span><span class="p">:</span> <span class="kt">u32</span><span class="p">,</span>
  <span class="n">power</span><span class="p">:</span> <span class="kt">u64</span><span class="p">,</span>
  <span class="n">dead</span><span class="p">:</span> <span class="n">boolean</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We have 7bytes wasted, for each object. For 100 objects, 700Bytes Wasted. Compared to:</p>

<div class="language-zig highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Enemies</span> <span class="p">{</span>
  <span class="n">color</span><span class="p">:</span> <span class="kt">u32</span><span class="p">,</span>
  <span class="n">boost</span><span class="p">:</span> <span class="kt">u32</span><span class="p">,</span>
  <span class="n">power</span><span class="p">:</span> <span class="kt">u64</span><span class="p">,</span>
<span class="p">};</span>

<span class="n">let</span> <span class="n">alive</span> <span class="o">=</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Enemies</span><span class="o">&gt;</span><span class="p">();</span>
<span class="n">let</span> <span class="n">dead</span> <span class="o">=</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Enemies</span><span class="o">&gt;</span><span class="p">()</span>
</code></pre></div></div>

<p><strong>Why this matters?</strong></p>

<p>Because we wan’t to reduce the amount of wasted bytes, so that we can fit as much data in the cache lines.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> lscpu

Caches <span class="o">(</span><span class="nb">sum </span>of all<span class="o">)</span>:      
  L1d:                    128 KiB <span class="o">(</span>4 instances<span class="o">)</span>
  L1i:                    128 KiB <span class="o">(</span>4 instances<span class="o">)</span>
  L2:                     1 MiB <span class="o">(</span>4 instances<span class="o">)</span>
  L3:                     8 MiB <span class="o">(</span>1 instance<span class="o">)</span>
</code></pre></div></div>

<p>So if we can fit more data in that <code class="language-plaintext highlighter-rouge">128KiB</code> cache line, we have more speed.</p>

<h3 id="other-work">Other work</h3>

<p>This are the list of other places to look at:</p>

<ul>
  <li><a href="https://github.com/rqlite/rqlite">rqlite</a></li>
  <li><a href="https://github.com/cockroachdb/cockroach/tree/master/pkg/geo">cockroach db</a></li>
  <li><a href="https://github.com/facebook/rocksdb/blob/main/db/memtable.cc">rocksdb</a> (too much c, written like my mom’s grocery list)</li>
  <li><a href="https://github.com/google/leveldb/blob/main/db/memtable.cc">leveldb’s</a> implementation of above memtable</li>
  <li><a href="https://dev.to/justinethier/log-structured-merge-trees-1jha">some person’s code on building sst table</a></li>
  <li><a href="https://github.com/facebook/rocksdb/wiki/MemTable">some comparison list for god knows what</a></li>
</ul>]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[Building a simple ondisk storage engine]]></summary></entry><entry><title type="html">Lameboy</title><link href="https://ikouchiha47.github.io/2024/04/20/gameboy-emulator.html" rel="alternate" type="text/html" title="Lameboy" /><published>2024-04-20T05:30:00+05:30</published><updated>2024-04-20T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/04/20/gameboy-emulator</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/04/20/gameboy-emulator.html"><![CDATA[<h1 id="emulating-the-gamebouy">Emulating the Gamebouy</h1>

<p>I have never played with one, and maybe I don’t want to either. While that
doesn’t mean I don’t like the engineering behind it.</p>

<p>After spending a good length of time with your keyboard, its probably
pre-destined for most developers to end up writing an emulator. I maybe a bit
late to the party. But I come in with the newest sick language in town. <a href="https://ziglang.org/documentation/master/">Zig</a></p>

<p>At the time of writing this, zig was yet to release their 0.12.0 version. This
version included the package manager. And I was using their master branch. It
just feel real <em>hip</em> to wait for a feature land into production in near real-time in opensource world.</p>

<p>Anywho.</p>

<p>I was inspired by the history of how came into being. From two youtube videos:</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=9Ki-kH751_8">How the Game Boy ᵃˡᵐᵒˢᵗ ruined Nintendo</a></li>
  <li><a href="https://www.youtube.com/watch?v=HyzD8pNlpwI">The Ultimate Gameboy Talk</a></li>
</ul>

<p>At this time, I was also, reading how memory and cpu works. And writing an
emulator felt like the right idea to understand this better.</p>

<p>The choice of zig is mostly because it was a better C. Without the package
manager thought, I would have gone back to <code class="language-plaintext highlighter-rouge">golang</code></p>

<p><br /></p>

<h2 id="chip-8">Chip 8</h2>

<p>Its a customary step in the world emulator dev, to start with a CHIP-8 emulator,
before attempting a <code class="language-plaintext highlighter-rouge">NES</code>, or <code class="language-plaintext highlighter-rouge">GB</code> and then a <code class="language-plaintext highlighter-rouge">GBA</code>.</p>

<p>CHIP-8 is not like gameboy, it’s more of a programming language, which came with its own VM, much like
java. This allowed people to write video games easier.</p>

<p>Gameboy on the other hand used a Silicon on Chip (LR35902) as its processor, RAM capable of 
fetching, decoding and executing instructions.</p>

<p>One of the <strong>main differences</strong> is the clock cycle. CHIP-8 running on a VM, was
too simple. Most instructions now, are assumed to take the same clock cycle. The
clock those days wee too less, so, those era of machines took some time to
execute the equivalent CPU instruction, but overall 60Hz.</p>

<p>That’s approximately 16 ticks. (1/60) * 1000.</p>

<p>While the gameboy’s processor took different number of clock cycles, for
different instructions.</p>

<ul>
  <li>Although some CHIP-8 emulations tries to follow the <a href="https://jackson-s.me/2019/07/13/Chip-8-Instruction-Scheduling-and-Frequency.html">Scheduling frequency</a>. But they do an equivalent of <code class="language-plaintext highlighter-rouge">time.sleep(ms)</code>, but it’s not the correct way, because you are effectively robbing the cpu in the vm from execute any work inbetween. *</li>
</ul>

<p>The best way to do this is to use a</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>enum CpuState {
    Running
    IoWaiting
}
</code></pre></div></div>
<p>and, then use the <code class="language-plaintext highlighter-rouge">ticks</code> logic provided by the <strong>UI library</strong>. So for
<code class="language-plaintext highlighter-rouge">javascript</code> it would be <code class="language-plaintext highlighter-rouge">requestAnimationFrame</code>, for <strong>cliers</strong>, it would be
the ticks provided by the <code class="language-plaintext highlighter-rouge">SDL2</code> library. (or whatever your prefered is, just
don’t sleep.). Every tick, the exectuor always renders, and runs the cpu cycle
as long as the <code class="language-plaintext highlighter-rouge">CpuState</code> is <code class="language-plaintext highlighter-rouge">Running</code>.</p>

<p>So, the CPU execution stops only when you are waiting for an user input, in
which case <code class="language-plaintext highlighter-rouge">CpuState</code> is <code class="language-plaintext highlighter-rouge">IoWaiting</code>.</p>

<p>The <a href="https://en.wikipedia.org/wiki/CHIP-8">Wikipedia</a> link does a better job of explaning what it is. CHIP-8 emulators need to 
implement only 34 instructions, <em>and you can skip the sound implementation ;)</em></p>

<p>Here is the docs from <a href="/posts/chip8.html">https://web.archive.org/web/*/https://devernay.free.fr/hacks/chip8/C8TECH10.HTM</a>, in a better format. Following the rules from <a href="http://bettermotherfuckingwebsite.com/">http://bettermotherfuckingwebsite.com/</a></p>

<p>And people have written in details on how it works, and how to implement one:</p>

<ul>
  <li><a href="https://austinmorlan.com/posts/chip8_emulator/">https://austinmorlan.com/posts/chip8_emulator/</a></li>
  <li><a href="https://tobiasvl.github.io/blog/write-a-chip-8-emulator/">https://tobiasvl.github.io/blog/write-a-chip-8-emulator/</a></li>
</ul>

<p>are the two popular ones. Wikipedia article is your best guide. In case you face
issues, the <a href="https://www.reddit.com/r/EmuDev/">r/EmuDev</a> , reddit community is
pretty helpful and so is their discord channel.</p>

<p>In the end it should look like:</p>

<p><img src="/img/invaders_screen_1.png" alt="invaders loading screen" width="400" /></p>

<p><img src="/img/invaders_screen_2.png" alt="game screen" width="400" /></p>

<h4 id="some-learnings-from-chip-8">Some learnings from CHIP-8</h4>

<ul>
  <li>
    <p>A memory, is formed using a gated latch or transistors. The first one is SRAM
and the second is a DRAM. Both have their advantages and disadvantages.</p>
  </li>
  <li>
    <p>This latches have a data line and a write enabled line. So, a latch can store
1 bit of memory (1 or 0). For 8 bits, we need 8 registers, addressing memory
(2^8=)256bits</p>
  </li>
  <li>
    <p>As memory grew, these cells were arranged in matrices. The addressing is
therefore must consists of which row and column the memory cell is in.
Further memory is also arranged in banks and multiple banks are grouped
together. This all leads you to <code class="language-plaintext highlighter-rouge">page</code>, <code class="language-plaintext highlighter-rouge">page frames</code>, <code class="language-plaintext highlighter-rouge">TLB</code>, <code class="language-plaintext highlighter-rouge">MMU</code>, and <code class="language-plaintext highlighter-rouge">OS
Pages</code></p>
  </li>
  <li>
    <p>A modern day DRAM consumes much less voltage to indicate a bit (1/0), than
SRAM. While SRAMs don’t suffer from data leakage, DRAMs have cacpitors as
memory cells. So each read causes some voltage to leak while reading, and
hence the data needs to be written back. Also a different module to make sure
the data is not lost overtime.</p>
  </li>
  <li>
    <p>Given the above, DRAMs henceforth, needs electricity to keep running. And is
much much much faster than SRAM.</p>
  </li>
  <li>
    <p>CPU moves the data between the DRAM and the SSD. Here we can read in details
about memory banks and how these days DRAMs, uses 32bit data lines and
control wires works, further by splitting memory in 8bits of 4 groups. This
memory banking will come in handy when building the gameboy emulator. For
<strong>CHIP-8</strong> everything fits in memory.</p>
  </li>
  <li>
    <p>Although a chip-8 uses 8bit registers, instructions requires 16bits, and
this is done, by accessing 2 words, using the <strong>Program Counter</strong>. And then
using a 16bit register, to store the two 8bit values. <code class="language-plaintext highlighter-rouge">(lo &lt;&lt; 8) as u16 | hi</code></p>
  </li>
  <li>
    <p>Processing each opcode, it doesn’t take much of a learning curve once you have
figured out bit manipulation. One of the things to keep it mind, is to clamp
the values for each registers, and program counter, so that memory access doesn’t 
go out of available space.</p>
  </li>
  <li>
    <p><strong>Timing</strong> is a bitch.</p>
  </li>
  <li>
    <p><strong>Overall</strong>, its quite fun to watch how fast the cpu <code class="language-plaintext highlighter-rouge">Fetch</code>, <code class="language-plaintext highlighter-rouge">Decode</code> and
<code class="language-plaintext highlighter-rouge">Execute</code> cycle works.</p>
  </li>
  <li>
    <p>The last thing was interupt handling. The way interrupts are handled is, when
you press a key, the CPU state changes, and it takes the key pressed, is puts
in a register. After which, the CPU state is changed to <code class="language-plaintext highlighter-rouge">Running</code>.
The program (in this case the CHPI-8 game), is responsible for using an
Instruction to read this registered key pressed from the <code class="language-plaintext highlighter-rouge">register</code>.
This is called <strong>Memory Mapped IO</strong></p>
  </li>
</ul>

<p><strong>Implementation Gotchas</strong></p>

<ul>
  <li>For each stage, use the chip8 programs that are used to test the emulator,
<a href="https://github.com/Timendus/chip8-test-suite">here</a></li>
  <li>The initial commit, should contain, initializing the empty memory, adding the
sprites and then loading the game data into memory from the address 0x0200</li>
  <li>With each step, test the emulator with the <strong>roms</strong> in the <code class="language-plaintext highlighter-rouge">test suite</code>.</li>
  <li>Try to display the IBM Logo as the first step. (I know, IBM. What days).</li>
  <li>Get familiar with writing shit in hex. Like <code class="language-plaintext highlighter-rouge">0x1000</code> , for 4kb. (0-4095).</li>
</ul>

<p><br /></p>

<h2 id="gamebouy">Gamebouy</h2>

<p><em>Turn down for what.</em></p>

<p>There are a couple of things to be excited about, while making the emulator for
gameboy.</p>

<p><em>I am skipping the sound for this one too, I only like trumpet music</em></p>

<ul>
  <li>
    <p>The games sometimes, are much larger than then available memory a gameboy had
to deal with. Which was somewhere around 64K address space. So, shit like
<code class="language-plaintext highlighter-rouge">0xffff</code></p>
  </li>
  <li>
    <p>You have only 32KB of ROM, where game is read from. And the rest 32KB is
distributed amongs VRAM, ERAM, HRAM etc. The ROM is more of a switchable ROM.</p>
  </li>
  <li>
    <p>For games that don’t fit in the address range (0x4000-0x7FFF) , they need to
be loaded from disk, the memory in cartdige i guess.</p>
  </li>
  <li>
    <p>16bits are used for addressing. Including peripherials.</p>
  </li>
</ul>

<p><strong>Sources</strong>:</p>

<ul>
  <li><a href="https://gbdev.gg8.se/wiki/articles/CPU_Registers_and_Flags">https://gbdev.gg8.se/wiki/articles/CPU_Registers_and_Flags</a></li>
  <li><a href="https://mgba-emu.github.io/gbdoc/">https://mgba-emu.github.io/gbdoc/</a></li>
  <li><a href="https://rylev.github.io/DMG-01/public/book/cpu/registers.html">https://rylev.github.io/DMG-01/public/book/cpu/registers.html</a></li>
  <li><a href="https://blog.rekawek.eu/2017/02/09/coffee-gb/">https://blog.rekawek.eu/2017/02/09/coffee-gb/</a></li>
</ul>

<p>To be continued…</p>]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[An attempt at writing a gameboy emulator and running it on FPGA]]></summary></entry><entry><title type="html">Arbok</title><link href="https://ikouchiha47.github.io/2024/04/20/file-storage-system-design.html" rel="alternate" type="text/html" title="Arbok" /><published>2024-04-20T05:30:00+05:30</published><updated>2024-04-20T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/04/20/file-storage-system-design</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/04/20/file-storage-system-design.html"><![CDATA[]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[A journal for the file storage system built as an working POC]]></summary></entry><entry><title type="html"></title><link href="https://ikouchiha47.github.io/2024/04/20/interview_overview.html" rel="alternate" type="text/html" title="" /><published>2024-04-20T05:30:00+05:30</published><updated>2024-04-20T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/04/20/interview_overview</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/04/20/interview_overview.html"><![CDATA[<h1 id="binary-search">Binary Search</h1>

<h2 id="base-algo">Base Algo</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">lo</span><span class="p">,</span> <span class="nx">hi</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span>

<span class="k">while</span><span class="p">(</span><span class="nx">lo</span> <span class="o">&lt;</span> <span class="nx">hi</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">mid</span> <span class="o">=</span> <span class="p">(</span><span class="nx">lo</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">hi</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">nums</span><span class="p">[</span><span class="nx">mid</span><span class="p">]</span> <span class="o">===</span> <span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">mid</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">target</span> <span class="o">&gt;</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">mid</span><span class="p">])</span> <span class="p">{</span>
    <span class="nx">hi</span> <span class="o">=</span> <span class="nx">mid</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">lo</span> <span class="o">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
<span class="p">}</span>

<span class="c1">// recurssion</span>

<span class="nf">bs</span><span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">f</span><span class="p">(</span><span class="nx">lo</span><span class="p">,</span> <span class="nx">hi</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">lo</span> <span class="o">&lt;</span> <span class="nx">hi</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>

    <span class="kd">let</span> <span class="nx">mid</span> <span class="o">=</span> <span class="p">(</span><span class="nx">lo</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">hi</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">target</span> <span class="o">===</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">mid</span><span class="p">])</span> <span class="k">return</span> <span class="nx">mid</span><span class="p">;</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">target</span> <span class="o">&gt;</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">mid</span><span class="p">])</span> <span class="k">return</span> <span class="nf">f</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">hi</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">f</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">lo</span><span class="p">,</span> <span class="nx">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="bisect-leftright">Bisect Left/Right</h2>

<p>The idea is to keep moving, as long as <code class="language-plaintext highlighter-rouge">target</code> <code class="language-plaintext highlighter-rouge">&lt;= or &gt;=</code>  nums[mid]</p>

<p><em>Bisect Left</em>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span><span class="p">(</span><span class="nx">lo</span> <span class="o">&lt;</span> <span class="nx">hi</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">mid</span> <span class="o">=</span> <span class="p">(</span><span class="nx">lo</span> <span class="o">+</span> <span class="nx">hi</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// use the previous one for prevent overflow but cooler</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">target</span> <span class="o">&lt;=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">mid</span><span class="p">])</span> <span class="p">{</span>
    <span class="nx">hi</span> <span class="o">=</span> <span class="nx">mid</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">lo</span> <span class="o">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>Bisect Right</em>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span><span class="p">(</span><span class="nx">lo</span> <span class="o">&lt;</span> <span class="nx">hi</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">mid</span> <span class="o">=</span> <span class="p">(</span><span class="nx">hi</span> <span class="o">+</span> <span class="nx">lo</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span> <span class="c1">// you could also do, lo + (hi - lo)/2</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">target</span> <span class="o">&gt;=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">mid</span><span class="p">])</span> <span class="p">{</span>
    <span class="nx">lo</span> <span class="o">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">hi</span> <span class="o">=</span> <span class="nx">mid</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>_Key takeaway, lo &lt; hi, hi = mid, lo = mid + 1, this pattern never changes.</p>

<h2 id="minimum-of-maximum">Minimum of Maximum</h2>

<p>While distributing N items amongst Y boxes(or people or whatevs),
find the maximum or minimum for each Y.</p>

<p>The core idea is to assume a possibleMax or possibleMin as nums[mid] and adjust the mid based on criteria.</p>

<blockquote>
  <p>Using floor or ceil in the mid point calculation depends on the reality of the scenario.</p>
</blockquote>

<ul>
  <li>Assume we want to distribute d items to each of Y boxes</li>
  <li>Calculate the sum of items required, as sum(y/d for y in Y)</li>
  <li>Check if it matches the given target, if not adjust the window</li>
</ul>

<p><em>Base Template</em>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">let</span> <span class="p">[</span><span class="nx">minItems</span><span class="p">,</span> <span class="nx">maxItems</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(...</span><span class="nx">items</span><span class="p">)]</span>

<span class="c1">// Each box receives (y = ) possibleItemsCount number of items</span>
<span class="c1">// total number of boxes is X/y , where X is number of boxes available</span>
<span class="kd">let</span> <span class="nx">possibleTotalBoxes</span> <span class="o">=</span> <span class="p">(</span><span class="nx">possibleItemsCount</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">items</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">X</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">X</span><span class="o">/</span><span class="nx">possibleItemsCount</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>

<span class="k">while</span><span class="p">(</span><span class="nx">minItems</span> <span class="o">&lt;</span> <span class="nx">maxItems</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">possibleItemsCount</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">((</span><span class="nx">maxItems</span> <span class="o">+</span> <span class="nx">minItems</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>

  <span class="k">if</span><span class="p">(</span><span class="nf">possibleTotalBoxes</span><span class="p">(</span><span class="nx">possibleItemsCount</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">N</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">minItems</span> <span class="o">=</span> <span class="nx">possibleItemsCount</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">maxItem</span> <span class="o">=</span> <span class="nx">possibleItemsCount</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>Minimize max items to put in store</em>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="p">[</span><span class="nx">minItems</span><span class="p">,</span> <span class="nx">maxItems</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(...</span><span class="nx">quantities</span><span class="p">)]</span>
  <span class="kd">const</span> <span class="nx">totalShopsReqr</span> <span class="o">=</span> <span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">quantities</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">X</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">X</span> <span class="o">/</span> <span class="nx">y</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>

  <span class="k">while </span><span class="p">(</span><span class="nx">minItems</span> <span class="o">&lt;</span> <span class="nx">maxItems</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// floor because, if we use ceil(11/3) it would mean we need to have 12 items</span>
    <span class="c1">// otherwise 2 stores get 4 each, and one gets 3. </span>
    <span class="c1">// the question requires us to minimize max number of product</span>

    <span class="kd">let</span> <span class="nx">possibleMaxPerShop</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">((</span><span class="nx">minItems</span> <span class="o">+</span> <span class="nx">maxItems</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>

    <span class="c1">// we want to minimize the sum, to we need to keep looking</span>
    <span class="c1">// to see if there is a smaller value, like bisec_left</span>
    <span class="k">if </span><span class="p">(</span><span class="nf">totalShopsReqr</span><span class="p">(</span><span class="nx">possibleMaxPerShop</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">minItems</span> <span class="o">=</span> <span class="nx">possibleMaxPerShop</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">maxItems</span> <span class="o">=</span> <span class="nx">possibleMaxPerShop</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">minItems</span><span class="p">;</span>
</code></pre></div></div>

<p>*Maximum Candies:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="p">[</span><span class="nx">minCandi</span><span class="p">,</span> <span class="nx">maxCandi</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(...</span><span class="nx">candies</span><span class="p">)];</span>
    <span class="kd">let</span> <span class="nx">totalStudents</span> <span class="o">=</span> <span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">candies</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">X</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">X</span><span class="o">/</span><span class="nx">y</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>

    <span class="k">while</span><span class="p">(</span><span class="nx">minCandi</span> <span class="o">&lt;</span> <span class="nx">maxCandi</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// we want to maximize the candy distribuion, so</span>
        <span class="c1">// for floor(11/3) we get only 3 candies per student, but we can do better</span>
        <span class="c1">// 2 can get 4 candies, and 1 can get 3, exhausting all 11</span>
        <span class="kd">let</span> <span class="nx">possibleMax</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">((</span><span class="nx">maxCandi</span> <span class="o">+</span> <span class="nx">minCandi</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>

        <span class="c1">// if the total number of students possible is equal to k</span>
        <span class="c1">// we can consider it as a viable solution unless something greater comes up</span>
        <span class="c1">// if we had to minimize it, we would have to move the max candies to the left</span>
        <span class="c1">// so explore lower values</span>
        <span class="k">if</span><span class="p">(</span><span class="nf">totalStudents</span><span class="p">(</span><span class="nx">possibleMax</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">minCandi</span> <span class="o">=</span> <span class="nx">possibleMax</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">maxCandi</span> <span class="o">=</span> <span class="nx">possibleMax</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h1 id="prefix-sum">Prefix Sum</h1>

<p>The base idea is to solve for range queries on sub-arrays of the array. It comes as an optimization
in places, where calculating cumulative result needs a re-iteration, starting or ending from the present index.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">sumFromHere</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">sumFromHere</span> <span class="o">+=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// or</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&gt;=</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With prefix sum, keep a track of the sum upto that point.
So the sum between two points becomes: <code class="language-plaintext highlighter-rouge">prefix[i] - prefix[j]</code></p>

<p><em>Total number of subarray Sum Equals K</em></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span><span class="nx">acc</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">v</span><span class="p">),</span> <span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="c1">// rest of the problem reduces to two sum.</span>
<span class="c1">// except we keep track of count</span>

<span class="kd">let</span> <span class="nx">diffcountMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">(),</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">// for a difference of 0, we have 1 subarray</span>
<span class="c1">// this handles negative numbers, like arr = [6, 1, 2, -8]</span>
<span class="nx">diffcountMap</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>


<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">prefix</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nx">prefix</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">K</span>
  
  <span class="kd">let</span> <span class="nx">countTillDiff</span> <span class="o">=</span> <span class="nx">diffcounMap</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">diff</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">diffcountMap</span><span class="p">.</span><span class="nf">has</span><span class="p">(</span><span class="nx">diff</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">count</span> <span class="o">+=</span> <span class="nx">countTillDiff</span>
  <span class="p">}</span>

  <span class="c1">// at this point, we need to keep track of the</span>
  <span class="c1">// present count, for the seen value. </span>
  <span class="c1">// if any diff reaches here, it remembers the previous count upto</span>
  <span class="c1">// that prefix sum</span>
  <span class="nx">diffcountMap</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">prefix</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">countTillDiff</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</code></pre></div></div>

<p><em>Kadane’s Maximum Subarray Sum</em></p>

<p>This is a variation of the prefix sum, where we can discard the
previous running sum, because it no longer contributes to the 
maximum.
While keeping track of the previous maximum</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">runningSum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">presentMax</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">maximumSum</span> <span class="o">=</span> <span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="kc">Infinity</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">runningSum</span> <span class="o">+=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>

  <span class="nx">maximumSum</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="nx">maximumSum</span><span class="p">,</span> <span class="nx">runningSum</span><span class="p">)</span>

  <span class="c1">// once the sum goes negative it no longer</span>
  <span class="c1">// could contribute to the maximum sum</span>
  <span class="nx">runningSum</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">runningSum</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>Trapping rain water</em></p>

<p>For trapping rain water, we need a left pillar, a right pillar, and (optionally) a dip. 
In such a case, at a givn position <code class="language-plaintext highlighter-rouge">i</code> the amount of water trapped would b:</p>

<p><code class="language-plaintext highlighter-rouge">min(height[leftPillar], height[rightPillar]) - height[i]</code>.</p>

<p>The catch however, is, the leftPillar doesn’t need to be the immediate left. Which is where the prefix max comes in.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">leftMax</span> <span class="o">=</span> <span class="nx">heights</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">acc</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="nx">acc</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="nx">v</span><span class="p">))</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">heights</span><span class="p">[</span><span class="mi">0</span><span class="p">]]).</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="kd">let</span> <span class="nx">rightMax</span> <span class="o">=</span> <span class="nx">heights</span><span class="p">.</span><span class="nf">reduceRight</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">acc</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="nx">acc</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="nx">v</span><span class="p">))</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">heights</span><span class="p">[</span><span class="mi">0</span><span class="p">]]).</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>


<span class="kd">let</span> <span class="nx">totalWater</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">trapped</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="nx">leftMax</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">rightMax</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">-</span> <span class="nx">v</span>
  <span class="k">return</span> <span class="nx">acc</span> <span class="o">+</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">trapped</span><span class="p">))</span>
<span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="interval-problems">Interval Problems</h1>

<p>The premise is given an array of intervals, we need to check if another interval
would fit in. Or finding an overlap for a given set of intervals.</p>

<p>Two key points:</p>
<ul>
  <li>check the opposite ends</li>
  <li>if there are too many conditions for overlap, think in terms of negation</li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Partial Overlaps

[  a-----b  ]
       [ c-----d ]


Partial Overlaps

     [  a-----b  ]
[  c-----d  ]


Matches end to end

[  a-----b  ]
[  c-----d  ]

Inside the lap

[  a--------b  ]
[    c----d    ]
</code></pre></div></div>

<p>Once we have so many conditions, its time to consider <code class="language-plaintext highlighter-rouge">negation</code>.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>What doesn't overlap

Ends before

        [  a-----b  ]
[ c--d ]

Starts After

[  a---b  ]
           [ c---d ]
</code></pre></div></div>

<h3 id="finding-overlaps">Finding overlaps</h3>

<p>The condition would be:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">has_overlaps</span><span class="p">(</span><span class="n">currInterval</span><span class="p">,</span> <span class="n">newInterval</span><span class="p">):</span>
  <span class="n">startInclusive</span> <span class="o">=</span> <span class="n">newInterval</span><span class="p">.</span><span class="n">start</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">currInterval</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">currInterval</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">endInclusive</span> <span class="o">=</span> <span class="n">newInterval</span><span class="p">.</span><span class="n">end</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">currInterval</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">currInterval</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">startInclusive</span> <span class="ow">or</span> <span class="n">endInclusive</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">in_range</span> <span class="o">=</span> <span class="p">(</span><span class="nx">point</span><span class="p">,</span> <span class="nx">left</span><span class="p">,</span> <span class="nx">right</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">point</span> <span class="o">&gt;=</span> <span class="nx">left</span> <span class="o">&amp;&amp;</span> <span class="nx">point</span> <span class="o">&lt;=</span> <span class="nx">right</span>

<span class="kd">function</span> <span class="nf">hasOverlap</span><span class="p">(</span><span class="nx">currInterval</span><span class="p">,</span> <span class="nx">newInterval</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">startInclusive</span> <span class="o">=</span> <span class="nf">in_range</span><span class="p">(</span><span class="nx">newInterval</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span> <span class="nx">currInterval</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span> <span class="nx">currInterval</span><span class="p">.</span><span class="nx">end</span><span class="p">)</span>
  <span class="nx">endInclusice</span> <span class="o">=</span> <span class="nf">in_range</span><span class="p">(</span><span class="nx">newInterval</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span> <span class="nx">currInterval</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span> <span class="nx">currInterval</span><span class="p">.</span><span class="nx">end</span><span class="p">)</span>

  <span class="k">return</span> <span class="nx">startInclusive</span> <span class="o">||</span> <span class="nx">endInclusive</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>Check Overlap Possible</em></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">intervals</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">17</span><span class="p">,</span> <span class="mi">21</span><span class="p">]]</span>
<span class="kd">let</span> <span class="nx">t1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">14</span><span class="p">,</span> <span class="mi">16</span><span class="p">],</span> <span class="nx">t2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">hasOverlap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">intervals</span><span class="p">,</span> <span class="nx">newInterval</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">interval</span> <span class="k">of</span> <span class="nx">intervals</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nf">in_range</span><span class="p">(</span><span class="nx">newInterval</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">...</span><span class="nx">interval</span><span class="p">)</span> <span class="o">||</span> <span class="nf">in_range</span><span class="p">(</span><span class="nx">newInterval</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">...</span><span class="nx">interval</span><span class="p">))</span>
      <span class="k">return</span> <span class="kc">true</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="kc">false</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>Merge Intervals</em></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sortedIntervals</span> <span class="o">=</span> <span class="nx">intervals</span><span class="p">.</span><span class="nf">toSorted</span><span class="p">((</span><span class="nx">p</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="c1">// now that everything is sorted by start times,</span>
<span class="c1">// all we need is to traverse the number line</span>
<span class="c1">// It would start to look like prefix-xy</span>

<span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[</span><span class="nx">sortedIntervals</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>

<span class="c1">// To check</span>
<span class="c1">// |---| (lastL, lastR)</span>
<span class="c1">//      |---|(currL, currR)</span>
<span class="c1">// </span>
<span class="c1">// Converting to number line</span>
<span class="c1">// | --- | | --- |</span>
<span class="c1">// 0     2 3     5</span>
<span class="c1">// so lastR &lt; currL : its a New Interval</span>
<span class="c1">// otherwise, we want the max of lastR and currR</span>
<span class="c1">// because we want to take the max of merge and its not sorted</span>

<span class="nx">sortedIntervals</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">interval</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="p">[</span><span class="nx">lastL</span><span class="p">,</span> <span class="nx">lastR</span><span class="p">]</span> <span class="o">=</span> <span class="nx">acc</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="kd">let</span> <span class="p">[</span><span class="nx">currL</span><span class="p">,</span> <span class="nx">currR</span><span class="p">]</span> <span class="o">=</span> <span class="nx">interval</span><span class="p">;</span>

  <span class="k">if</span><span class="p">(</span><span class="nx">lastR</span> <span class="o">&lt;</span> <span class="nx">currL</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">acc</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">interval</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">acc</span><span class="p">.</span><span class="nf">at</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="nx">lastR</span><span class="p">,</span> <span class="nx">currR</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>

<span class="p">},</span> <span class="nx">answer</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[Binary Search]]></summary></entry><entry><title type="html">Troubleshooting containers</title><link href="https://ikouchiha47.github.io/2024/02/05/how-containers-work.html" rel="alternate" type="text/html" title="Troubleshooting containers" /><published>2024-02-05T05:30:00+05:30</published><updated>2024-02-05T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/02/05/how-containers-work</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/02/05/how-containers-work.html"><![CDATA[<h1 id="understanding-containerization-and-improve-debugging">Understanding containerization and improve debugging</h1>

<p>As I delve more into kubernetes, the more I get distracted by side quests. This is one of those. In this <code class="language-plaintext highlighter-rouge">DLC</code>,
I try to understand <code class="language-plaintext highlighter-rouge">containerization</code>, how it works, and essentially learn how to debug a running docker container.</p>

<p>I had first encountered <code class="language-plaintext highlighter-rouge">chroot</code> while installing <a href="https://wiki.archlinux.org/title/installation_guide#Chroot">ArchLinux</a>.</p>

<p>Basically while installation, you mount the chose partition to the <code class="language-plaintext highlighter-rouge">/mnt</code> directory. This creates a mount point. A <code class="language-plaintext highlighter-rouge">mount point</code> is a directory within an existing file system that acts as an access point for another file system or storage device.
<a href="https://github.com/archlinux/arch-install-scripts/blob/master/pacstrap.in">Pacstrap</a> is then responsible for installing the base system, creating additional mounts, 
<a href="https://github.com/archlinux/arch-install-scripts/blob/22493153c753806e3ba64b74741b019a63a86270/common#L24">setting up</a> required namespaces and mountpoints, the base system, installing packages etc.</p>

<p>After mounting you change root (chroot) to set the new <code class="language-plaintext highlighter-rouge">/mnt</code> mount point as the root of the filesystem. As a result you are able to access already installed user-space utilities
to setup basic networking, timezones, etc. Maybe install some software, reset root password, recover system without affecting other partitions.</p>

<p>There is more to that, the general idea around isolation and how linux kernel works.</p>

<p>Building a container for a process like docker requires taking care of a couple of things:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Namespace Isolation</code>: Utilizes various namespaces (network, PID, UTS, etc.) to isolate the child process from the host’s resources.</li>
  <li><code class="language-plaintext highlighter-rouge">Resource Control</code>: Sets cgroups limitations for memory, CPU, and other resources for the container.</li>
  <li><code class="language-plaintext highlighter-rouge">User Mapping</code>: Optionally uses a user namespace to provide a different UID/GID environment within the container.</li>
  <li><code class="language-plaintext highlighter-rouge">Seccomp Filtering</code>: Restricts system calls allowed within the container for enhanced security.</li>
  <li><code class="language-plaintext highlighter-rouge">Root Filesystem Mounting</code>: Mounts the specified directory as the container’s root filesystem.</li>
  <li><code class="language-plaintext highlighter-rouge">Capability</code>: Drops unnecessary capabilities from the container process.</li>
</ul>

<p><a href="https://blog.lizzie.io/linux-containers-in-500-loc/contained.c">Linux containers in 500 lines of C</a></p>

<h3 id="linux-filesystem">Linux filesystem</h3>
<p>The Linux, rather The Unix philosophy says <code class="language-plaintext highlighter-rouge">On a UNIX system, everything is a file; if something is not a file, it is a process.</code>.</p>

<p>So, during the bootup process, the boot loader, loads the selected kernel and the small filesystem (files and folders) called <code class="language-plaintext highlighter-rouge">initrd</code>.
This contains some userspace code, which is responsible for mounting the <code class="language-plaintext highlighter-rouge">Linux File System</code>, set it as root, and then runs the boot sequence and 
executing <code class="language-plaintext highlighter-rouge">SysV</code> initialization system.</p>

<p>Nowadays we have <code class="language-plaintext highlighter-rouge">initramfs</code>, which is a compressed file. You can read more about this at the kernel docs:</p>

<ul>
  <li>https://docs.kernel.org/admin-guide/initrd.html</li>
  <li>https://wiki.gentoo.org/wiki/Initramfs_-_make_your_own</li>
  <li>https://man7.org/linux/man-pages/man7/bootup.7.html</li>
</ul>

<p><strong>Linux File System</strong></p>

<p>Its a hierarchical file/folder structure, with a <code class="language-plaintext highlighter-rouge">/</code> root directory, followed by <code class="language-plaintext highlighter-rouge">/mnt</code>, <code class="language-plaintext highlighter-rouge">/net</code>, <code class="language-plaintext highlighter-rouge">/cpu</code>, <code class="language-plaintext highlighter-rouge">/proc</code>, <code class="language-plaintext highlighter-rouge">/sys</code>, etc.
Some are real files, some are virtual representations.</p>

<p>We can see that using a docker image, and inspecting the contents. And comparing with our linux system.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--name</span> busyback alpine:latest <span class="nb">true
</span>docker container <span class="nb">export </span>busybuck | <span class="nb">gzip</span> <span class="o">&gt;</span> busybuck.tar.gz
<span class="nb">mkdir</span> <span class="nt">-p</span> rootfs <span class="o">&amp;&amp;</span> <span class="nb">tar</span> <span class="nt">-xvf</span> busybuck.tar.gz <span class="nt">--directory</span> rootfs
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="nb">cd </span>rootfs <span class="o">&amp;&amp;</span> tree <span class="nt">-L</span> 1

├── bin
├── dev
├── etc
├── home
├── lib
├── media
├── mnt
├── opt
├── proc
├── root
├── run
├── sbin
├── srv
├── sys
├── tmp
├── usr
└── var
</code></pre></div></div>

<p>This is also what the output of <code class="language-plaintext highlighter-rouge">ls -l /</code> looks like. So basically, the container has a similar directory structure, with similar user-space programs.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chroot </span>rootfs /bin/sh
</code></pre></div></div>

<p>This should drop you to a shell. And you can run <code class="language-plaintext highlighter-rouge">ps -ef</code> in it.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh1#/ ps <span class="nt">-ef</span>
PID   USER     TIME  COMMAND
sh1#/ 
</code></pre></div></div>

<p>You can now mount the host OS’s proc into <code class="language-plaintext highlighter-rouge">/proc</code> of the chrooted directory. And check the processes running on the host os.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh1#/ mount <span class="nt">-t</span> proc proc /proc
</code></pre></div></div>

<p>Now if we have a process running in host, we can <code class="language-plaintext highlighter-rouge">pkill $HOST_PROCESS_ID</code> from the child. Overall, <strong>chroot doesn’t give you access protection</strong>.</p>

<p>Since both the host and chrooted file systems are under the same namespace, its able to show all the processes from the parent namespace. So we need some form of isolation.
This isolation comes in the process of <code class="language-plaintext highlighter-rouge">namespaces</code> and <code class="language-plaintext highlighter-rouge">cgroups</code>.</p>

<p><strong>Cgroups</strong> help with limiting how much resources a bunch of applications in the same group can use.</p>

<ul>
  <li>Resouce limits (hard and soft)</li>
  <li>CPU pinning</li>
  <li>Freeze and unfreeze cgroups to stop and migrate processes.</li>
  <li>IO, network bandwith,</li>
  <li>Monitoring, etc</li>
</ul>

<p>These days systemd probably keeps a track of these, and the cgroups can be found in</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ls /sys/fs/cgroup/system.slice/</code></li>
  <li><code class="language-plaintext highlighter-rouge">ls /sys/fs/cgroup/user.slice/</code></li>
</ul>

<p><strong>Namespaces</strong> control what a process can see. Namespaces are like subtrees, so namespaces can be nested. The processes in child namespace, won’t be aware of the parent namespace.</p>

<p><em>We won’t be discussing cgroups here, because they are simple to understand</em>. <strong>Cgroups</strong> are found inside <code class="language-plaintext highlighter-rouge">/sys/fs/cgroups</code>, but since most modern day OS has systemd, and in systemd these are called slices.</p>

<p>Here is a reference to how you can use cgroups to control the amount of resources used by a program: <a href="https://itnext.io/chroot-cgroups-and-namespaces-an-overview-37124d995e3d">cgroups example</a>. Imma more interested in namespaces.</p>

<h2 id="prior-knowledge">Prior knowledge</h2>

<p>We need to understand <code class="language-plaintext highlighter-rouge">users</code> and <code class="language-plaintext highlighter-rouge">capabilities</code>.</p>

<p>The primary way Linux handles file permissions is through the implementation of <code class="language-plaintext highlighter-rouge">users</code>. There are normal users, for which Linux applies privilege checking, and there is the superuser that bypasses most (if not all) checks.</p>

<p>Linux <code class="language-plaintext highlighter-rouge">capabilities</code> were created to provide a more granular application of the security model. Instead of running the binary as root, you can apply only the specific capabilities an application requires to be effective.</p>

<p><strong>User namespaces</strong> isolate security-related identifiers and attributes, in particular, user IDs and group IDs, keys, root directory and capabilities.</p>

<p>Consider a namespace called <code class="language-plaintext highlighter-rouge">constrained</code>.The namespace <code class="language-plaintext highlighter-rouge">constrained</code> will only inherit the permissions/capabilities of the creating process.</p>

<p>If the creating process didn’t have full capabilites enabled, the <code class="language-plaintext highlighter-rouge">constrained</code> namespace wouldn’t either.</p>

<p><code class="language-plaintext highlighter-rouge">Linux containers</code> uses capabilities to determine what processes can run inside a namespace. For example, lets take the executable <code class="language-plaintext highlighter-rouge">ping</code>.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh1#/ which ping
sh1# /usr/bin/ping
sh1#/ <span class="nb">cp</span> /usr/bin/ping myping
sh1#/ myping 8.8.8.8
sh1#/
sh1#/
sh1# ./myping: socktype: SOCK_RAW
sh1# ./myping: socket: Operation not permitted
sh1# ./myping: <span class="o">=&gt;</span> missing cap_net_raw+p capability or setuid?
sh1#/
sh1#/
sh1#/ <span class="c"># ping needs root privielges to open network socket</span>
sh1#/ <span class="nb">sudo chown </span>root myping
sh1#/ <span class="nb">sudo </span>myping 8.8.8.8
sh1#/
sh1#/ <span class="c"># but we want to invoke it without sudo. we set the setuid bit. with +s</span>
h1#/
sh1# <span class="nb">sudo chmod</span> +s myping
sh1#/
sh1#/ myping 8.8.8.8
sh1# PING 8.8.8.8 <span class="o">(</span>8.8.8.8<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
sh1# 64 bytes from 8.8.8.8: <span class="nv">icmp_seq</span><span class="o">=</span>1 <span class="nv">ttl</span><span class="o">=</span>63 <span class="nb">time</span><span class="o">=</span>45.7 ms
</code></pre></div></div>

<p>Or you could also do:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setcap cap_net_raw+ep ./myping
</code></pre></div></div>

<p>So preventing this by carefully crafting capabilities become important.</p>

<h2 id="namespaces">Namespaces</h2>

<p>A <a href="https://www.man7.org/linux/man-pages/man7/namespaces.7.html">namespace</a> wraps a global system resource in an abstraction that makes it appear to the processes 
within the namespace that they have their own isolated instanceof the global resource.</p>

<p>There are a few <a href="https://www.redhat.com/sysadmin/7-linux-namespaces">different kinds of namespaces</a> and further maybe added.</p>

<ul>
  <li>cgroup_namespaces</li>
  <li>pid_namespaces</li>
  <li>network_namespaces</li>
  <li>mnt_namespaces</li>
  <li>uts_namespaces</li>
  <li>user_namespaces</li>
</ul>

<p><strong>Tools needed to improve understanding</strong>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">lsns</code>, to list namespaces</li>
  <li><code class="language-plaintext highlighter-rouge">unshare</code>, to create namespace and move the calling process to the new namespace.</li>
  <li><code class="language-plaintext highlighter-rouge">nsenter</code>, executes program in the namespace(s), specified as args.</li>
  <li><code class="language-plaintext highlighter-rouge">clone</code>, to create new processes in a new namespace from parent process.</li>
  <li><code class="language-plaintext highlighter-rouge">setns</code>, move the calling process to another existing namespace.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Linux containers</code> or <code class="language-plaintext highlighter-rouge">docker</code> employs a bunch of these namespacing and cgroups to run processes which runs the program in isolation. It also sorts out network topology, using veth and switches. Understanding them will also help
us debug containers from outside, by mounting containers with debug tools in the same namespaces.</p>

<h3 id="user_namespaces">user_namespaces</h3>

<p>As described above user namespace is a collection of capabilities, user ids etc. In addition they can be nested.</p>

<p>There can be multiple nestations. The parent namespace will see the child namespaces having the same <code class="language-plaintext highlighter-rouge">user ID</code>.And hence have access to all the files.</p>

<p>However the child namespaces cannot interract with the parent namespaces. Because to the child namepsace, the child namespaces perceives itself as PID: 1. So its world starts from itself.</p>

<h3 id="mount_namespaces">mount_namespaces</h3>

<p>This are a bit complicated. Mount namespaces provide isolation of the list of mounts seen by the processes in each namespace instance.
Thus, the processes in each of the mount namespace instances will see distinct single-directory hierarchies.</p>

<p>This lets us mount and unmount filesystems, without affecting the whole system. So in case of <code class="language-plaintext highlighter-rouge">docker</code>,
each container can have its own root file system, in isolation, and also not affect any other containers or host filesystem.</p>

<p>Mount namespace can also be nested, but the visibility of the mounted or unmounted filesystem depends on the <code class="language-plaintext highlighter-rouge">propagation_type</code> configuration.</p>

<p>This configuration is provided during the <code class="language-plaintext highlighter-rouge">mount</code> phase.</p>

<p>The <a href="https://www.man7.org/linux/man-pages/man7/mount_namespaces.7.html">docs</a> provide examples into how mount and visibility works. But here are the key details.</p>

<p>Depending on the propagation_type type for each mount, the mount and unmount events are propagated to peers. Why do we need peers? In order to be able to automatically mount filesystems into all mount namespaces (depedning
on scenario), linux needed something called <code class="language-plaintext highlighter-rouge">shared subtrees</code>.</p>

<p>Once mounted, these devices are marked with a <code class="language-plaintext highlighter-rouge">mount state</code>. like <code class="language-plaintext highlighter-rouge">shared:*</code>, <code class="language-plaintext highlighter-rouge">master:*</code>, ‘<Nothing>'.</Nothing></p>
<ul>
  <li>Shared meanining all the processes in the namespace can see the mounted or unmounted device.</li>
  <li>Private is not shared, so no peering</li>
  <li>Master/slave is where events propagate to the namespace from shared ones, but they do send events to their peers.</li>
</ul>

<p>When creating a less privileged mount namespace, shared mounts are reduced to slave mounts. This ensures that mappings performed in less privileged mount namespaces will 
not propagate to more privileged mount namespaces.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">PS1='sh1#</span><span class="s1">'
</span><span class="go">
</span><span class="gp">sh1#</span>/ mount <span class="nt">--make-shared</span> /mntX
<span class="gp">sh1#</span>/ mount <span class="nt">--make-private</span> /mntY
<span class="go">
</span><span class="gp">#</span>/ <span class="nb">cat</span> /proc/self/mountinfo | <span class="nb">grep</span> <span class="s1">'/mnt'</span> | <span class="nb">sed</span> <span class="s1">'s/ - .*//'</span>
<span class="go">
77 61 8:17 / /mntX rw,relatime shared:1
83 61 8:15 / /mntY rw,relatime
</span></code></pre></div></div>

<p>We can see, <code class="language-plaintext highlighter-rouge">/mntX</code> has <code class="language-plaintext highlighter-rouge">shared:1</code>, while <code class="language-plaintext highlighter-rouge">/mntY</code> is private. Creating nampespace and mounting in sub directories should make them inherit this <code class="language-plaintext highlighter-rouge">mount state</code></p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">#</span>/ <span class="nv">PS1</span><span class="o">=</span><span class="s1">'sh2# '</span> <span class="nb">sudo </span>unshare <span class="nt">-m</span> <span class="nt">--propagation</span> unchanged sh
<span class="gp">sh2#</span>/ <span class="nb">mkdir</span> /mntX/a <span class="o">&amp;&amp;</span> mount /dev/sdb6 /mntX/a
<span class="gp">sh2#</span>/ <span class="nb">mkdir</span> /mntY/b <span class="o">&amp;&amp;</span> mount /dev/sdb7 /mntY/b
<span class="go">
</span><span class="gp">sh2#</span>/ <span class="nb">cat</span> /proc/self/mountinfo
<span class="go">
222 145 8:17 / /mntX rw,relatime shared:1
225 145 8:15 / /mntY rw,relatime
178 222 8:22 / /mntX/a rw,relatime shared:2
230 225 8:23 / /mntY/b rw,relatime
</span></code></pre></div></div>

<p>from the parent namespace <code class="language-plaintext highlighter-rouge">sh1#/ cat /proc/self/mountinfo</code>, we can’t see the <code class="language-plaintext highlighter-rouge">/mntY/b</code>, because of the mount state and propagaition type set to <code class="language-plaintext highlighter-rouge">private</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>77 61  8:17 / /mntX rw,relatime shared:1
83 61  8:15 / /mntY rw,relatime
179 77 8:22 / /mntX/a rw,relatime shared:2
</code></pre></div></div>

<p>Let’s check a case where privileges are downgraded.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh1#/ mount <span class="nt">--make-shared</span> /mntZ
sh1#/ <span class="nb">cat</span> /proc/self/mountinfo

133 83 8:22 / /mntZ rw,relatime shared:1

sh1#/ <span class="nv">PS1</span><span class="o">=</span><span class="s1">'sh2#'</span> <span class="nb">sudo </span>unshare <span class="nt">-m</span> <span class="nt">--propagation</span> unchanged sh
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh2#/ mount <span class="nt">--make-slave</span> /mntY
sh2#/ <span class="nb">cat</span> /proc/self/mountinfo

169 167 8:22 / /mntZ rw,relatime master:1
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh2#/ <span class="nb">mkdir</span> /mntZ/c <span class="o">&amp;&amp;</span> mount /dev/sda8 /mntZ/c
sh2#/ <span class="nb">cat</span> /proc/self/mountinfo

169 167 8:22 / /mntZ rw,relatime master:1
175 169 8:5 / /mntZ/c rw,relatime
</code></pre></div></div>

<p>we can see, the <code class="language-plaintext highlighter-rouge">/mntZ/c</code> has dropped priveleges. But this is opaque to the parent namespace.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh1#/ <span class="nb">cat</span> /proc/self/mountinfo

133 83 8:22 / /mntZ rw,relatime shared:1
</code></pre></div></div>

<p>So, if we create a mount point for <code class="language-plaintext highlighter-rouge">/mntZ/d</code> from this namespace it should be visible, because of <code class="language-plaintext highlighter-rouge">shared</code>. But inside the namespace <code class="language-plaintext highlighter-rouge">sh2</code>, it gets degraded to <code class="language-plaintext highlighter-rouge">slave/master</code></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh1#/ <span class="nb">mkdir</span> <span class="nt">-p</span> /mntZ/d <span class="o">&amp;&amp;</span> mount /dev/sdb9 /mntZ/d
sh1#/ <span class="nb">cat</span> /proc/self/mountinfo

178 133 8:1 / /mntZ/d rw,relatime shared:2

sh2#/ <span class="nb">cat</span> /proc/self/mountinfo

179 169 8:1 / /mntZ/d rw,relatime master:2
</code></pre></div></div>

<h3 id="uts_namespaces">uts_namespaces</h3>

<p>This is mostly used to isolate the hostname. So lets create a uts namespace in the <code class="language-plaintext highlighter-rouge">rootfs</code> alipne image.</p>

<h3 id="pid_namespaces">pid_namespaces</h3>

<p>When a process is created on most Unix-like operating systems, it is given a specific numeric identifier called a <code class="language-plaintext highlighter-rouge">process ID(PID)</code>.
All of these processes are tracked in a special file system called <code class="language-plaintext highlighter-rouge">procfs</code>. and is mounted under <code class="language-plaintext highlighter-rouge">/proc</code>.</p>

<p>PID namespaces isolate the <code class="language-plaintext highlighter-rouge">process ID number space</code>, meaning that processes in different PID namespaces can have the same PID.  PID
namespaces allow containers to provide functionality such as suspending/resuming the set of processes in the container and migrating 
the container to a new host while the processes inside the container maintain the same PIDs.</p>

<p>A <code class="language-plaintext highlighter-rouge">/proc</code> virtual filesystem shows (in the /proc/pid directories) only processes visible in the PID namespace of the process that 
performed the mount, even if the <code class="language-plaintext highlighter-rouge">/proc</code> filesystem is viewed from processes in other namespaces. As shown before.</p>

<blockquote>
  <p>A caveat of the creating the pid_namespace is, the process that initiates the creation of a new PID namespace with <code class="language-plaintext highlighter-rouge">unshare</code> does not enter the new namespace; only its child processes do.
In our system</p>
  <ul>
    <li>for kernel the PID is 0</li>
    <li>PID = 1 is the assigned to init, which is the first process in the <code class="language-plaintext highlighter-rouge">user space</code>.</li>
  </ul>
</blockquote>

<p>There are some special stuff that goes on while handling <code class="language-plaintext highlighter-rouge">PID = 1</code>. You can find them <a href="https://medium.com/hackernoon/the-curious-case-of-pid-namespaces-1ce86b6bc900">here</a>:</p>

<p>First lets check the contents of <code class="language-plaintext highlighter-rouge">/</code></p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">vagrant@vagrant:~/containerization$</span><span class="w"> </span><span class="nb">ls</span> /
<span class="go">
bin  boot  dev  etc  home  lib  lib32  lib64  libx32  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  vagrant  var
</span></code></pre></div></div>

<p>In here, we definetly don’t need to the <code class="language-plaintext highlighter-rouge">lost+found</code>, so we will need to clean them after. Because the child namespaces will inherit the mount points from the parent processes. Reducing image size by removing unnecessary files.
Also disallowing access to modifications in the parent namespace.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant@vagrant:~/containerization<span class="nv">$ </span>unshare <span class="nt">-Urfpm</span> <span class="nt">--mount-proc</span>
vagrant@vagrant:~/containerization<span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> rootfs/.oldroot

root@vagrant:~/containerization# <span class="nb">ls</span> /
<span class="c"># bin  boot  dev  etc  home  lib  lib32  lib64  libx32  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  vagrant  var</span>


root@vagrant:~/containerization# mount

<span class="c"># /dev/sda1 on / type ext4 (rw,relatime,discard,errors=remount-ro)</span>
<span class="c"># cgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)</span>
<span class="c"># pstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)</span>
<span class="c"># bpf on /sys/fs/bpf type bpf (rw,nosuid,nodev,noexec,relatime,mode=700)</span>
<span class="c"># debugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime)</span>
<span class="c"># tracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)</span>
<span class="c"># fusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)</span>
<span class="c"># configfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)</span>
<span class="c"># ... etc</span>


<span class="c"># we need to bind the rootfs folder to a folder in the new namespace</span>
root@vagrant:~/containerization# mount <span class="nt">--rbind</span> rootfs rootfs
root@vagrant:~/containerization# mount
/dev/sda1 on / <span class="nb">type </span>ext4 <span class="o">(</span>rw,relatime,discard,errors<span class="o">=</span>remount-ro<span class="o">)</span>
proc on /proc <span class="nb">type </span>proc <span class="o">(</span>rw,nosuid,nodev,noexec,relatime<span class="o">)</span>
/dev/sda1 on /home/vagrant/containerization/rootfs <span class="nb">type </span>ext4 <span class="o">(</span>rw,relatime,discard,errors<span class="o">=</span>remount-ro<span class="o">)</span>
none on /home/vagrant/containerization/rootfs/proc <span class="nb">type </span>proc <span class="o">(</span>rw,relatime<span class="o">)</span>


root@vagrant:~/containerization# pivot_root rootfs rootfs/.oldroot
root@vagrant:~/containerization# <span class="nv">PATH</span><span class="o">=</span>/bin:/sbin:<span class="nv">$PATH</span> <span class="c"># because apline's PATH doesn't have sbin</span>
root@vagrant:~/containerization# mount

<span class="c"># /dev/sda1 on /.oldroot type ext4 (rw,relatime,discard,errors=remount-ro)</span>
<span class="c"># none on /.oldroot/home/vagrant/containerization/rootfs/proc type proc (rw,relatime)</span>
<span class="c"># proc on /.oldroot/proc type proc (rw,nosuid,nodev,noexec,relatime)</span>
<span class="c"># /dev/sda1 on / type ext4 (rw,relatime,discard,errors=remount-ro)</span>
<span class="c"># none on /proc type proc (rw,relatime)</span>
<span class="c">#</span>
<span class="c"># here you can see, the initial filesystem /dev/sda1 is now pointing to the /.oldroot directory</span>
<span class="c"># so we can unmount it. thereby removing the </span>


<span class="c"># we could mount the proc and tmpfs file system.</span>


root@vagrant:~/containerization# umount <span class="nt">-l</span> /.oldroot2
root@vagrant:~/containerization# mount

/dev/sda1 on / <span class="nb">type </span>ext4 <span class="o">(</span>rw,relatime,discard,errors<span class="o">=</span>remount-ro<span class="o">)</span>
none on /proc <span class="nb">type </span>proc <span class="o">(</span>rw,relatime<span class="o">)</span>
proc on /proc <span class="nb">type </span>proc <span class="o">(</span>rw,relatime<span class="o">)</span>
root@vagrant:~/containerization#


root@vagrant:~/containerization# <span class="nb">echo</span> <span class="s1">'lopard'</span> <span class="o">&gt;</span> /tmp/sometext
root@vagrant:~/containerization# <span class="nb">cat</span> /tmp/sometext
lopard

root@vagrant:~/containerization# <span class="nb">exit
logout

</span>vagrant@vagrant:~/containerization<span class="nv">$ </span><span class="nb">cat</span> /tmp/sometext
<span class="nb">cat</span>: /tmp/sometext: No such file or directory
</code></pre></div></div>

<p><strong>How to use this knowledge to interract with docker containers</strong></p>

<p>In order to see this, lets start a <code class="language-plaintext highlighter-rouge">docker container</code> with a <code class="language-plaintext highlighter-rouge">nginx</code> server running. And inspect the directories from there.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@vagrant:~#</span><span class="w"> </span>docker run <span class="nt">--name</span> webserver <span class="nt">-d</span> nginx
<span class="gp">root@vagrant:~#</span><span class="w"> </span><span class="nb">sudo </span>lsns
<span class="go">
        NS TYPE   NPROCS   PID USER    COMMAND
</span><span class="gp">4026532167 mnt         3  5426 root    nginx: master process nginx -g daemon off;</span><span class="w">
</span><span class="gp">4026532168 uts         3  5426 root    nginx: master process nginx -g daemon off;</span><span class="w">
</span><span class="gp">4026532169 ipc         3  5426 root    nginx: master process nginx -g daemon off;</span><span class="w">
</span><span class="gp">4026532170 pid         3  5426 root    nginx: master process nginx -g daemon off;</span><span class="w">
</span><span class="gp">4026532171 net         3  5426 root    nginx: master process nginx -g daemon off;</span><span class="w">
</span><span class="gp">4026532242 cgroup      3  5426 root    nginx: master process nginx -g daemon off;</span><span class="w">
</span><span class="go">
</span><span class="gp">#</span><span class="w"> </span>we can see the process <span class="nb">id </span>is 5426, we can also check it using
<span class="gp">root@vagrant:~#</span><span class="w"> </span>docker inspect <span class="nt">-f</span> <span class="s1">''</span> webserver
<span class="gp">root@vagrant:~#</span><span class="w"> 
</span><span class="gp">root@vagrant:~#</span><span class="w"> </span>findmnt <span class="nt">-N</span> 5426
<span class="go">TARGET                  SOURCE               FSTYPE  OPTIONS
/                       overlay              overlay rw,relatime,lowerdir=/var/lib/docker/overlay2/l/IZIA76DUQYFLCEM6U6T4JUAXKU:/var/lib/docker/overlay2/l/EAJ2MHCQ4VHZ24ER57333HY2ZO:/var/lib/docker/overlay2/l/T5SEXCKKH5MODEFH44MWNERUFN:/var/lib/do
├─/proc                 proc                 proc    rw,nosuid,nodev,noexec,relatime
│ ├─/proc/bus           proc[/bus]           proc    ro,nosuid,nodev,noexec,relatime
│ ├─/proc/fs            proc[/fs]            proc    ro,nosuid,nodev,noexec,relatime
│ ├─/proc/irq           proc[/irq]           proc    ro,nosuid,nodev,noexec,relatime
│ ├─/proc/sys           proc[/sys]           proc    ro,nosuid,nodev,noexec,relatime
│ ├─/proc/sysrq-trigger proc[/sysrq-trigger] proc    ro,nosuid,nodev,noexec,relatime
│ ├─/proc/acpi          tmpfs                tmpfs   ro,relatime,inode64
│ ├─/proc/kcore         tmpfs[/null]         tmpfs   rw,nosuid,size=65536k,mode=755,inode64
│ ├─/proc/keys          tmpfs[/null]         tmpfs   rw,nosuid,size=65536k,mode=755,inode64
│ └─/proc/timer_list    tmpfs[/null]         tmpfs   rw,nosuid,size=65536k,mode=755,inode64
├─/dev                  tmpfs                tmpfs   rw,nosuid,size=65536k,mode=755,inode64
│ ├─/dev/pts            devpts               devpts  rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666
│ ├─/dev/mqueue         mqueue               mqueue  rw,nosuid,nodev,noexec,relatime
│ └─/dev/shm            shm                  tmpfs   rw,nosuid,nodev,noexec,relatime,size=65536k,inode64
├─/sys                  sysfs                sysfs   ro,nosuid,nodev,noexec,relatime
│ ├─/sys/firmware       tmpfs                tmpfs   ro,relatime,inode64
│ └─/sys/fs/cgroup      cgroup[/system.slice/docker-b509c5f9e86e1b9241ab80a44be1f990148c523c5233cf5d69453ec3ea459d6e.scope]
│                                            cgroup2 ro,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot
├─/etc/resolv.conf      /dev/sda1[/var/lib/docker/containers/b509c5f9e86e1b9241ab80a44be1f990148c523c5233cf5d69453ec3ea459d6e/resolv.conf]
│                                            ext4    rw,relatime,discard,errors=remount-ro
├─/etc/hostname         /dev/sda1[/var/lib/docker/containers/b509c5f9e86e1b9241ab80a44be1f990148c523c5233cf5d69453ec3ea459d6e/hostname]
│                                            ext4    rw,relatime,discard,errors=remount-ro
└─/etc/hosts            /dev/sda1[/var/lib/docker/containers/b509c5f9e86e1b9241ab80a44be1f990148c523c5233cf5d69453ec3ea459d6e/hosts]
                                             ext4    rw,relatime,discard,errors=remount-ro

</span><span class="gp">#</span><span class="w"> </span>we can see the mount list <span class="k">for </span>the container
<span class="gp">root@vagrant:~#</span><span class="w"> 
</span><span class="gp">root@vagrant:~#</span><span class="w"> </span>nsenter <span class="nt">--target</span> 5426 <span class="nt">--mount</span> <span class="nb">ls</span> /
<span class="go">bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

</span><span class="gp">root@vagrant:~#</span><span class="w"> </span>docker <span class="nb">exec </span>webserver <span class="nb">touch </span>new_test_file
<span class="gp">root@vagrant:~#</span><span class="w">
</span><span class="gp">root@vagrant:~#</span><span class="w"> </span><span class="nb">ls</span> /proc/5426/root | <span class="nb">grep </span>new_test
<span class="go">new_test_file
</span></code></pre></div></div>
<p>The last bit shows, that, <code class="language-plaintext highlighter-rouge">linux containers</code> are basically <code class="language-plaintext highlighter-rouge">processes</code> that can be interracted with using regular <code class="language-plaintext highlighter-rouge">linux system tools</code>.</p>

<p><strong>Troubleshoot</strong></p>

<p>We might need to check on our processes inside out container. We can mount the <code class="language-plaintext highlighter-rouge">mnt/</code> and <code class="language-plaintext highlighter-rouge">pid namespace</code>.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
root@vagrant:~# nsenter <span class="nt">--target</span> 5426 <span class="nt">-m</span> <span class="nt">-p</span> ps <span class="nt">-ef</span>
nsenter: failed to execute ps: No such file or directory

root@vagrant:~# nsenter <span class="nt">--target</span> 5426 <span class="nt">-m</span> <span class="nt">-p</span> apt-get <span class="nb">install </span>procps
root@vagrant:~# nsenter <span class="nt">--target</span> 5426 <span class="nt">-m</span> <span class="nt">-p</span> ps <span class="nt">-ef</span>

UID          PID    PPID  C STIME TTY          TIME CMD
root           1       0  0 17:37 ?        00:00:00 nginx: master process nginx <span class="nt">-g</span> daemon off<span class="p">;</span>
nginx         29       1  0 17:37 ?        00:00:00 nginx: worker process

root@vagrant:~# docker run <span class="nt">-it</span> <span class="nt">--name</span> debug-server-2 <span class="nt">--pid</span><span class="o">=</span>container:webserver <span class="nt">--network</span><span class="o">=</span>container:webserver raesene/alpine-containertools /bin/bash
bash-5.1#
bash-5.1#
bash-5.1# ps <span class="nt">-f</span>
PID   USER     TIME  COMMAND
    1 root      0:00 nginx: master process nginx <span class="nt">-g</span> daemon off<span class="p">;</span>
   29 101       0:00 nginx: worker process
   30 101       0:00 nginx: worker process
  258 root      0:00 /bin/bash
  264 root      0:00 ps <span class="nt">-f</span>
</code></pre></div></div>

<p>This works because we are creating a new namespace (debug-server-2), with the pid_namespace of the <code class="language-plaintext highlighter-rouge">webserver</code> container.</p>

<h3 id="network-namespaces">network namespaces</h3>

<p>This is used to manage the network stack between namespaces, routing tables, IP addresses, sockets etc. We basically need to be aware of two things:</p>
<ul>
  <li>veth, configure a point-to-point net namespace, between two namespaces. (server and db namespace)</li>
  <li>switch, connecting multiple namespaces.</li>
</ul>

<p><a href="https://www.redhat.com/sysadmin/net-namespaces">Redhat</a>, has a great article on how to set up <code class="language-plaintext highlighter-rouge">virtual ethernet</code> between two namespaces, and assigning ips to them.
We are going to see this in context of <code class="language-plaintext highlighter-rouge">docker</code>.</p>

<p>Lets try to find the <code class="language-plaintext highlighter-rouge">ip</code> of the <code class="language-plaintext highlighter-rouge">nginx box</code></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@vagrant:~# docker <span class="nb">exec </span>webserver ip addr
OCI runtime <span class="nb">exec </span>failed: <span class="nb">exec </span>failed: unable to start container process: <span class="nb">exec</span>: <span class="s2">"ip"</span>: executable file not found <span class="k">in</span> <span class="nv">$PATH</span>: unknown

<span class="c"># nsenter with the network namespace loaded</span>

root@vagrant:~# nsenter <span class="nt">--target</span> 5426 <span class="nt">--net</span> ip addr show
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    <span class="nb">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
6: eth0@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default
    <span class="nb">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
root@vagrant:~#
</code></pre></div></div>

<p><strong>Troubleshoot</strong></p>

<p>We can leverage joining processes from a new container to the network namespace from another (webserver) container. In linux terms it probably looks like</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">WEB_SERVER_PID</span><span class="o">=</span><span class="si">$(</span>docker inspect <span class="nt">-f</span> <span class="s1">''</span> webserver<span class="si">)</span>

<span class="c"># Join the network namespace</span>
unshare <span class="nt">--net</span><span class="o">=</span>/proc/<span class="nv">$WEB_SERVER_PID</span>/ns/net /bin/bash
</code></pre></div></div>

<p>Coming back to debugging with another docker container.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash-5.1# netstat <span class="nt">-tunap</span>
Active Internet connections <span class="o">(</span>servers and established<span class="o">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:80              0.0.0.0:<span class="k">*</span>               LISTEN      -
tcp        0      0 :::80                   :::<span class="k">*</span>                    LISTEN      -
bash-5.1# ip addr show
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    <span class="nb">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
6: eth0@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default
    <span class="nb">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever

</code></pre></div></div>

<h2 id="other-details">Other details:</h2>

<p><strong>Apparmor</strong></p>

<p>Apparmor is a mandatory ACL system that confines programs according to a set of rules that specify what files a given program can access. This proactive approach helps protect the system against both known and unknown vulnerabilities.
Even for root users.</p>

<p>This provides additional layer of security, apart from cgroups and namespaces and capabilites (<code class="language-plaintext highlighter-rouge">CAP_*</code>)</p>

<p><strong>seccomp</strong></p>

<p>This is used to allow or block specific <code class="language-plaintext highlighter-rouge">syscalls</code> for a <code class="language-plaintext highlighter-rouge">container/process</code>. These are enforced by guys at <a href="https://docs.docker.com/get-started/">docker</a>. For example, <code class="language-plaintext highlighter-rouge">unshare</code> is not permitted inside a docker container.
This can be turned of using <code class="language-plaintext highlighter-rouge">--security-opt seccomp=unconfined</code>.</p>

<p>Both of these are ways to allow isolation in the container. I think we have enough knowledge about how to work with <code class="language-plaintext highlighter-rouge">processes</code>, <code class="language-plaintext highlighter-rouge">namespaces</code>, <code class="language-plaintext highlighter-rouge">mounts</code>. We haven’t covered <code class="language-plaintext highlighter-rouge">network</code> in depth, but the article on Redhat,
alreay has a great explanation. Also there are different kinds of networks that docker allows, and it needs a separate post.</p>

<h2 id="notes">Notes</h2>

<p><strong>PID = 1</strong></p>

<p>Inside a namespace, init (pid 1) has three unique features when compared to other processes:</p>

<ul>
  <li>It does not automatically get default signal handers, so a signal sent to it is ignored unless it registers a signal hander for that signal.
(This is why many dockerized processes fail to respond to ctrl-c and you are forced to kill them with something like <code class="language-plaintext highlighter-rouge">docker kill</code>).</li>
  <li>If another process in the namespace dies before its children, its children will be <code class="language-plaintext highlighter-rouge">re-parented</code> to <code class="language-plaintext highlighter-rouge">pid 1</code>. This allows <code class="language-plaintext highlighter-rouge">init</code> to collect the exit status of the child processes so that the kernel can remove it from the process table.</li>
  <li>If it dies, every other process in the pid namespace will be forcibly terminated and the namespace will be cleaned up.</li>
</ul>

<p>This prevents us from doing <code class="language-plaintext highlighter-rouge">unshare --pid --mount-proc /bin/bash</code>. This will cause an error: <code class="language-plaintext highlighter-rouge">Error: bash: fork: Cannot allocate memory</code>, because,
<code class="language-plaintext highlighter-rouge">unshare</code> will exectue <code class="language-plaintext highlighter-rouge">/bin/bash</code>, which will load some <code class="language-plaintext highlighter-rouge">shell modules</code>.</p>

<p>The first process in that becomes <code class="language-plaintext highlighter-rouge">PID = 1</code>. When the process <code class="language-plaintext highlighter-rouge">exit</code>s, it causes <code class="language-plaintext highlighter-rouge">re-paranting</code>, and then <code class="language-plaintext highlighter-rouge">terminating all other processes in namespace</code>.</p>

<p>This eventually causes <code class="language-plaintext highlighter-rouge">init</code> of the host process, and the state change, and <code class="language-plaintext highlighter-rouge">creation of process</code> fails because PID cannot be allocated, resulting in the error, <code class="language-plaintext highlighter-rouge">Cannot allocate memory</code></p>

<p><strong>setuid</strong> or set user id</p>

<p>The Unix and Linux access rights flags setuid and setgid allow users to run an executable with the file system permissions of the executable’s owner or group respectively and to change behaviour in directories.</p>

<p>When the setuid or setgid attributes are set on an executable file, it means when running the executable it will set its permissions to that of the owner of file, instead of the uuser who launched it. For using this in code, once this bit is set, dropping privileges doesn’t prevent the uniprivileged user from accessing the file descriptor.</p>

<p>Hence careful consideration must be taken to replace the effective userid of the executable/program to that of the owner of the program, and closing filedesriptors on complete.
Read <a href="https://manpages.ubuntu.com/manpages/jammy/man2/execve.2.html">execve</a>.</p>

<blockquote>
  <p>If the set-user-ID bit is set on the program  file  referred  to  by pathname, thenthe 
effective  user  ID  of the calling process is changed to that of the owner of the program file.</p>
</blockquote>

<p>This allows the system designer to permit trusted programs to be run which a user would otherwise not be allowed to execute.</p>

<h2 id="references">References:</h2>

<ul>
  <li><a href="https://www.redhat.com/sysadmin/building-container-namespaces">https://www.redhat.com/sysadmin/building-container-namespaces</a></li>
  <li><a href="https://www.man7.org/linux/man-pages/man7/namespaces.7.html">https://www.man7.org/linux/man-pages/man7/namespaces.7.html</a></li>
  <li><a href="https://www.man7.org/linux/man-pages/man7/mount_namespaces.7.html">https://www.man7.org/linux/man-pages/man7/mount_namespaces.7.html</a></li>
  <li><a href="https://www.man7.org/linux/man-pages/man7/user_namespaces.7.html">https://www.man7.org/linux/man-pages/man7/user_namespaces.7.html</a></li>
  <li><a href="https://www.man7.org/linux/man-pages/man7/pid_namespaces.7.html">https://www.man7.org/linux/man-pages/man7/pid_namespaces.7.html</a></li>
  <li><a href="https://www.redhat.com/sysadmin/net-namespaces">https://www.redhat.com/sysadmin/net-namespaces</a></li>
  <li><a href="https://akashrajpurohit.com/blog/build-your-own-docker-with-linux-namespaces-cgroups-and-chroot-handson-guide/">https://akashrajpurohit.com/blog/build-your-own-docker-with-linux-namespaces-cgroups-and-chroot-handson-guide/</a></li>
  <li><a href="https://manpages.ubuntu.com/manpages/jammy/man2/setegid.2freebsd.html">https://manpages.ubuntu.com/manpages/jammy/man2/setegid.2freebsd.html</a></li>
  <li><a href="https://www.alanjohn.dev/blog/Deep-dive-into-Containerization-Creating-containers-from-scratch">https://www.alanjohn.dev/blog/Deep-dive-into-Containerization-Creating-containers-from-scratch</a></li>
  <li><a href="https://www.youtube.com/watch?v=0kJPa-1FuoI">https://www.youtube.com/watch?v=0kJPa-1FuoI</a></li>
  <li><a href="https://www.youtube.com/watch?v=EFOA2nCZ0gg&amp;list=RDCMUCPO2QgTCReBAThZca6MB9jg&amp;start_radio=1&amp;rv=EFOA2nCZ0">https://www.youtube.com/watch?list=RDCMUCPO2QgTCReBAThZca6MB9jg</a></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Thank you.</code></p>]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[Containers, processes, namespaces, security, troubleshooting]]></summary></entry><entry><title type="html">YALC</title><link href="https://ikouchiha47.github.io/2024/02/05/elaru-cache.html" rel="alternate" type="text/html" title="YALC" /><published>2024-02-05T05:30:00+05:30</published><updated>2024-02-05T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/02/05/elaru-cache</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/02/05/elaru-cache.html"><![CDATA[<p><a href="https://redis.com/glossary/lru-cache/">LRU</a> cache is an extension of a Cache, that behaves a certain way. The implementation will start with a cache implementation.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[writing an lru cache for interviews]]></summary></entry><entry><title type="html">Building an ecommerce website end to end</title><link href="https://ikouchiha47.github.io/2024/02/03/building-ecommerce-end-to-end.html" rel="alternate" type="text/html" title="Building an ecommerce website end to end" /><published>2024-02-03T05:30:00+05:30</published><updated>2024-02-03T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/02/03/building-ecommerce-end-to-end</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/02/03/building-ecommerce-end-to-end.html"><![CDATA[<h2 id="from-career-break-to-e-commerce-product-relearning-rails-and-build-ecommerce-platform">From Career Break to E-commerce Product: Relearning Rails and Build ecommerce platform</h2>

<p>Taking a career break can be daunting, but I used mine to embark on an ambitious project: building an end-to-end e-commerce website from scratch. Fueled by the memory of Rails 4, I dove in headfirst, only to realize the landscape had shifted dramatically with the arrival of Rails 7.</p>

<h3 id="rails-7-a-crash-course-in-the-new-frontier">Rails 7: A Crash Course in the New Frontier</h3>

<p>My initial excitement turned into nervous trepidation. Where do I even begin? Documentation became my bible, and countless hours were spent deciphering new patterns and paradigms. The biggest hurdle? <strong>js.erb</strong>. This new way of working with JavaScript felt alien, demanding a complete rethink of my front-end approach.</p>

<p>Handling JavaScript requests in controllers meant understanding:</p>

<p>= <a href="https://stimulus.hotwired.dev/handbook/hello-stimulus">Stimulus</a></p>
<ul>
  <li>Getting comfortable with <a href="https://turbo.hotwired.dev/handbook/streams">Turbo Frame &amp; Stream</a></li>
</ul>

<p>that streamlined communication between front-end and back-end. It was a steep learning curve, requires a complete day to get hold of it.</p>

<h3 id="handling-javascript-requests-a-tale-of-two-rails">Handling JavaScript Requests: A Tale of Two Rails</h3>

<p><strong>Rails 4: The UJS Era</strong></p>

<p>In Rails 4,5,6, handling JavaScript requests was often a blend of Unobtrusive JavaScript (UJS) and manual DOM manipulation.</p>

<p><strong>Using turbo links (which was enabled by default) meant getting to understand the specific events</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">tag</span> <span class="na">:meta</span><span class="err">,</span> <span class="na">name:</span> <span class="na">:psj</span><span class="err">,</span> <span class="na">action:</span> <span class="na">action_name</span><span class="err">,</span> <span class="na">controller:</span> <span class="na">controller_name</span> <span class="err">%</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Page</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">action</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">action</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">controller</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">action</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">Page</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">controller</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">meta[name=psj]</span><span class="dl">'</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">controller</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">Page</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">action</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">meta[name=psj]</span><span class="dl">'</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">action</span><span class="dl">'</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">page</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Page</span><span class="p">()</span>

<span class="nf">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">turbolinks:load</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">page</span><span class="p">.</span><span class="nf">controller</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">visitors</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">page</span><span class="p">.</span><span class="nf">action</span><span class="p">()</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">index</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
  <span class="k">return</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">main</span><span class="dl">'</span><span class="p">).</span><span class="nf">append</span><span class="p">(</span><span class="dl">'</span><span class="s1">&lt;li&gt;Hello from visitors&lt;/li&gt;</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p><strong>Using content_for with <code class="language-plaintext highlighter-rouge">yield</code> for page specific javascript</strong></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">yield</span><span class="err">(</span><span class="na">:head</span><span class="err">)</span> <span class="err">%</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- payment.html.erb --&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span> <span class="na">content_for</span> <span class="na">:head</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- header content specific to this payment page --&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://js.stripe.com/v3/"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="c">&lt;!-- do document.on('DOMContentLoaded') here --&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span> <span class="na">end</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p><strong>Rise of bundlers like brunch/webpack</strong> which is a rather painful way of hiding putting everything inside <code class="language-plaintext highlighter-rouge">application.js</code> . Basically use webpack like tool, to convert all your modular js to a single js file, and that will be served as <code class="language-plaintext highlighter-rouge">application.js</code>.</p>

<p><strong>Usage of fetch/XMLHttpRequest and handling the dom updates manually in js.erb file</strong> with <code class="language-plaintext highlighter-rouge">respond_do { |format| format.js }</code></p>

<p><strong>Rails 7: Embracing Stimulus and Turbo</strong></p>

<p>Rails 7 takes a more streamlined approach, leveraging Stimulus and Turbo. Initially this will really feel a lot like the <code class="language-plaintext highlighter-rouge">React</code> way of doing things.</p>

<p>So <code class="language-plaintext highlighter-rouge">turbo_frame</code> and <code class="language-plaintext highlighter-rouge">turbo_stream</code> takes care of your ajax requests. And <code class="language-plaintext highlighter-rouge">Stimulus</code> is your javascript dom framework to target dom elements.</p>

<p>These frameworks/libraries makes use of certain conventions, and relies on <code class="language-plaintext highlighter-rouge">data</code> attributes for their functionality. Stimulus monitors rails views for these <code class="language-plaintext highlighter-rouge">data</code> attributes to change, specifically the <code class="language-plaintext highlighter-rouge">data-controller</code> attribute.</p>

<p>The <code class="language-plaintext highlighter-rouge">javascripts/</code> directory has moved to <code class="language-plaintext highlighter-rouge">app/javascripts/</code>. The <code class="language-plaintext highlighter-rouge">app/javascripts</code> has a directory called <code class="language-plaintext highlighter-rouge">controllers/</code>. <strong>(These stimulus controllers have nothing to do with application controller)</strong></p>

<blockquote>
  <p>When you add a data-controller attribute to an element, Stimulus reads the identifier from the attribute’s value and creates a new instance of the corresponding controller class.
Stimulus invokes the connect() method anytime the controller connects to the DOM.</p>
</blockquote>

<p><a href="https://stimulus.hotwired.dev/reference/controllers">From the docs</a></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">data-controller=</span><span class="s">"hello"</span><span class="nt">&gt;</span>
  This text will change!
<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/javascripts/hello_controller.js</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">Controller</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@hotwired/stimulus</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nc">extends</span> <span class="nx">Controller</span> <span class="p">{</span>
  <span class="nf">connect</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello_controller.js: </span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello World!</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This should yield.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>Hello World<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>when the page with the html load. We can do a slightly more complex example.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">data-controller=</span><span class="s">"toggle"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">data-action=</span><span class="s">"click-&gt;toggle#toggle"</span><span class="nt">&gt;</span>Show<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">data-toggle-target=</span><span class="s">"content"</span><span class="nt">&gt;</span>Hello World<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Where:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">click</code> is action</li>
  <li><code class="language-plaintext highlighter-rouge">toggle#toggle</code> means <code class="language-plaintext highlighter-rouge">toggle_controller.js#toggle</code></li>
  <li><code class="language-plaintext highlighter-rouge">data-toggle-target</code>, where <code class="language-plaintext highlighter-rouge">toggle</code> is <code class="language-plaintext highlighter-rouge">controller</code> name.</li>
</ul>

<p>So for <code class="language-plaintext highlighter-rouge">search_controller.js</code> it would be <code class="language-plaintext highlighter-rouge">data-search-target</code>. Read more at the <a href="https://stimulus.hotwired.dev/reference/targets">docs</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/javasctips/toggle_controller.js</span>

<span class="k">import</span> <span class="p">{</span><span class="nx">Controller</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@hotwired/stimulus</span><span class="dl">"</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nc">extends</span> <span class="nx">Controller</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="nx">targets</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">content</span><span class="dl">"</span><span class="p">];</span>

  <span class="nf">toggle</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">hiddenClass</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">contentTarget</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">toggle</span><span class="p">(</span><span class="nx">hiddenClass</span><span class="p">);</span> 
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="stimulus-and-turbo-streamlining-interactions-in-rails-7">Stimulus and Turbo: Streamlining Interactions in Rails 7</h3>

<p>In Rails 7, two key libraries, Stimulus and Turbo, work together to create faster, more dynamic, and engaging web applications. Let’s delve into their individual roles and how they contribute to Rails 7’s efficiency:</p>

<p><a href="https://turbo.hotwired.dev/handbook/streams">Turbo</a>, on the other hand, deals with serving js requests, used mostly for form submissions, delete items without reloading page, updating cart etc.And avoid doing <code class="language-plaintext highlighter-rouge">fetch</code>, and rendering on client side with js.</p>

<p>Since this thing is integrated with rails, we can render html partials. Leveraging server side rendering, and response type.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/messages/_message.html.erb --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"&lt;%= dom_id message %&gt;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">message.content</span> <span class="err">%</span><span class="nt">&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- app/views/messages/index.html.erb --&gt;</span>
<span class="nt">&lt;h1&gt;</span>All the messages<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;</span><span class="err">%=</span> <span class="na">render</span> <span class="na">partial:</span> <span class="err">"</span><span class="na">messages</span><span class="err">/</span><span class="na">message</span><span class="err">",</span> <span class="na">collection:</span> <span class="err">@</span><span class="na">messages</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@message</span><span class="o">=</span> <span class="no">Message</span><span class="p">.</span><span class="nf">create</span><span class="p">()</span>

    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
      <span class="nb">format</span><span class="p">.</span><span class="nf">turbo_stream</span> <span class="k">do</span>
        <span class="n">render</span> <span class="ss">turbo_stream: </span><span class="n">turbo_stream</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="ss">:messages</span><span class="p">,</span> <span class="ss">partial: </span><span class="s2">"messages/message"</span><span class="p">,</span>
          <span class="ss">locals: </span><span class="p">{</span> <span class="ss">message: </span><span class="n">message</span> <span class="p">})</span>
      <span class="k">end</span>

      <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">messages_url</span> <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>

<p>You can also use <code class="language-plaintext highlighter-rouge">destroy.turbo_stream.erb</code> if you want to do multiple things like.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="err">%=</span> <span class="na">turbo_stream.replace</span> <span class="err">'</span><span class="na">cart-items-count</span><span class="err">'</span> <span class="na">do</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%=</span> <span class="na">render</span> <span class="na">partial:</span> <span class="err">'</span><span class="na">layouts</span><span class="err">/</span><span class="na">cart_items_count</span><span class="err">',</span> <span class="na">locals:</span> <span class="err">{</span> <span class="na">cart_items_count:</span> <span class="err">@</span><span class="na">cart_items_count</span> <span class="na">-</span> <span class="err">1</span> <span class="err">}</span> <span class="err">%</span><span class="nt">&gt;</span>
<span class="nt">&lt;</span><span class="err">%</span> <span class="na">end</span> <span class="err">%</span><span class="nt">&gt;</span>


<span class="nt">&lt;</span><span class="err">%=</span> <span class="na">turbo_stream.remove</span> <span class="err">"</span><span class="na">product_item_#</span><span class="err">{@</span><span class="na">item_id</span><span class="err">}"</span> <span class="err">%</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>You can read about it on the <a href="https://turbo.hotwired.dev/handbook/streams">docs</a>.</p>

<p>If you’re starting a new Rails 7 project, embracing Stimulus and Turbo is highly recommended. They offer a modern and efficient approach to building interactive and performant web applications, improving development experience, however weird.</p>

<h2 id="beyond-code-design-dilemmas-and-brutal-beauty">Beyond Code: Design Dilemmas and Brutal Beauty</h2>

<p>But an e-commerce website isn’t just code; it’s an experience. Design became my next frontier. Armed with “Non-Designer’s Design Book” and countless website reviews, I delved into the world of aesthetics. Trends like brutalism intrigued me, with its emphasis on raw functionality and bold typography. I experimented with this aesthetic, creating a clean and efficient layout that prioritized product visibility. The trick to making things look good is grouping and balancing.</p>

<p>Animation, too, captured my imagination. <a href="https://gsap.com/resources/get-started/">GSAP</a> specifically, Subtle product rotations on hover, smooth product filtering transitions – these small touches added a layer of polish and delight to the user experience.</p>

<p>But for an <code class="language-plaintext highlighter-rouge">MVP</code> this was unnecessary. I did waste some time on this. Also you dont need a fuckton of animations.</p>

<p>Choosing a <strong>color scheme</strong> is a different dilemma all together.</p>

<p><strong>The Power of CSS Grids and Flexbox</strong></p>

<p>My design journey also involved getting a grasp on:</p>
<ul>
  <li>How to design</li>
  <li>Understanding how to position elements with CSS Grids and Flexbox. Because they are one of the best things to happen in css.</li>
</ul>

<p>Flexbox offered me the flexibility to arrange elements horizontally or vertically, adjusting their alignment and distribution. CSS Grids, on the other hand, provided a structured approach, allowing me to create complex layouts with rows, columns, and gaps.</p>

<p>** For the most parts, Flexbox works just fine **</p>

<h3 id="overcoming-common-hurdles">Overcoming Common Hurdles:</h3>

<p>Initially, I encountered the same challenges many face when learning these tools:</p>

<ul>
  <li>Understanding the syntax and properties: Both Flexbox and Grids have their unique syntax and properties, requiring practice and experimentation to grasp fully.</li>
  <li>Visualizing the layout: Thinking spatially and translating that vision into code takes time and experience.</li>
</ul>

<p>However, I binged on website reviews, <a href="https://dribbble.com">dribble</a>, <a href="https://www.awwwards.com">Awwwards</a>, <a href="https://www.behance.net">Behance</a>. For most part the
website felt empty, so I had to generate some mockups using <a href="https://mockey.ai/">mockey</a>, and start filling out some products.</p>

<p><strong>Mobile-First: A Responsive Mindset</strong></p>

<p>I adopted a mobile-first approach, starting with the smallest screens and gradually adapting the layout for larger devices. This had several benefits:</p>

<ul>
  <li>Prioritizing mobile users: The majority of website traffic comes from mobile devices, so optimizing for smaller screens is crucial.</li>
  <li>Smaller changes for larger screens: Starting with a well-structured mobile layout simplifies adjustments for larger screens, often just requiring tweaks to grid and flexbox properties.</li>
  <li>Avoiding horizontal eye fatigue: On large screens, setting some fixed widths for content ensures users don’t have to make long horizontal eye movements, improving readability and navigation.</li>
</ul>

<p><strong>A Responsive Blend: Grids and Flexbox in Harmony</strong></p>

<p>The website didn’t rely solely on one tool. I strategically combined Grids and Flexbox depending on the screen size and layout requirements. 
Flexbox proved invaluable for responsive headers, product carousels, and user interfaces, while Grids helped structure product listings and complex page layouts.</p>

<h4 id="the-rise-of-the-powerpoint-presentation-website-a-rant">The Rise of the PowerPoint Presentation Website: A Rant</h4>

<p>However, my exploration of website design wasn’t all sunshine and rainbows. A concerning trend emerged: the prevalence of websites resembling glorified PowerPoint presentations. Endless horizontal scrolling, jarring animations, and intrusive pop-ups became commonplace, prioritizing aesthetics over usability. While these elements might grab attention for a fleeting moment, they often leave behind a trail of frustration and accessibility issues.</p>

<p>The UX Nightmare:</p>

<p>Imagine navigating a website that bombards you with horizontal scroll after horizontal scroll, each slide filled with text-heavy paragraphs and flashy animations. It’s a recipe for nausea and annoyance, especially on mobile devices with limited screen real estate. Not only is it tedious to navigate, but it also disproportionately impacts users with slower internet connections or less powerful devices, potentially leading to browser crashes and a complete barrier to accessing information.</p>

<p><strong>Accessibility: Beyond “Knock, Knock, Your Items Are Waiting For You”</strong></p>

<p>Accessibility often takes a backseat in this pursuit of visual spectacle. Websites crammed with animation and lacking proper semantic structure become impassable for users with disabilities, particularly those relying on screen readers. Imagine being a blind person trying to shop online, with your screen reader announcing “knock, knock, your items are waiting for you” without any clear context or navigation cues. It’s not just frustrating, it’s exclusionary.</p>

<p><code class="language-plaintext highlighter-rouge">A Call for Balance:</code></p>

<p>I’m not advocating for websites to be devoid of all design elements. Creativity and visual appeal have their place. But it’s crucial to strike a balance, prioritizing user experience and accessibility above all else. Websites should be clear, concise, and navigable, ensuring everyone has an equal opportunity to access information and complete tasks.</p>

<h4 id="key-points-to-consider">Key points to consider</h4>

<p><strong>Visual Hierarchy &amp; Readability:</strong></p>

<ul>
  <li>Color Contrast: Ensure sufficient contrast between text and background for optimal readability (WCAG guidelines are a great resource).</li>
  <li>Typography: Choose clear, legible fonts suitable for different screen sizes and avoid excessive font variations. Headings, subheadings, and body text should have distinct hierarchy.</li>
  <li>Balance &amp; White Space: Avoid clutter! Create visual breathing room with balanced use of elements and negative space.</li>
  <li>Grouping &amp; Proximity: Group related elements visually to enhance understanding and information flow.</li>
</ul>

<p><strong>User Interaction &amp; Usability:</strong></p>

<ul>
  <li>Clarity &amp; Actionable Items: Use clear, concise language for labels, buttons, and instructions. Make CTAs (Call to Actions) stand out with contrasting colors and shapes.</li>
  <li>Forms &amp; Interactions: Design intuitive forms with clear labels, error messages, and consistent interaction patterns. Prioritize user flow and minimize navigation complexity.</li>
  <li>Responsiveness: Adapt your design to different screen sizes and devices, ensuring seamless use across platforms.</li>
</ul>

<p>Additionally:</p>

<ul>
  <li>Color Psychology: Understand how colors evoke emotions and use them strategically to guide user experience.</li>
  <li>Imagery &amp; Icons: Use high-quality, relevant images and icons that enhance understanding and brand identity.</li>
  <li>Testing &amp; Feedback: Get user feedback early and iterate on your design based on their experiences.</li>
</ul>

<p>Thanks to the <strong>Non Designers Design Handbook</strong> and <em>Kevin Powell</em> and <em>Flux Academy</em> and other blogs and youtubes.</p>

<h2 id="building-the-infrastructure-a-network-odyssey">Building the Infrastructure: A Network Odyssey</h2>

<p>The journey didn’t end at the storefront. I had to build the infrastructure: a robust network that could handle product uploads, multi-device testing, and everything in between. This was uncharted territory for me, but the thirst for knowledge propelled me forward.</p>

<p>IPv4 vs. IPv6: A Balancing Act</p>

<p>My initial foray into networking began with understanding the intricacies of IP addresses. IPv4, the familiar friend, was slowly reaching its capacity. IPv6, the promising newcomer, beckoned with its vast address space. I learned that most modern devices, like my iPhone, could utilize both. Excitement filled me as I configured my DNS provider to point to my public IPv6 address – success! My website proudly served content on my iPhone.</p>

<p>But then came the reality check. Android devices, with their diverse configurations, presented a different story. My IPv6 dream crumbled. Undeterred, I explored solutions.</p>

<p><strong>No-IP.com: A Detour with Static IPs</strong></p>

<p>No-IP.com, offering static IP addresses, seemed like a potential answer. It would act as a bridge between my dynamic IPv6 and the outside world, ensuring consistent accessibility. However, a nagging feeling persisted – this was an unnecessary complication.</p>

<p><strong>ZeroTier: The VPN Savior</strong></p>

<p>The answer arrived in the form of ZeroTier. This clever software allowed me to create a private network, connecting my laptop and cloud server regardless of their physical locations. No need for complex configurations or static IPs. With ZeroTier, my machines shared virtual IP addresses within the network, enabling seamless communication.</p>

<p><strong>Socat: The Traffic Conductor</strong></p>

<p>Socat, a versatile networking tool, became my next companion. It efficiently redirected traffic between my machines, ensuring smooth data flow within the ZeroTier network.</p>

<h4 id="security-first-fortifying-the-network">Security First: Fortifying the Network</h4>

<p>Security was paramount. I meticulously configured firewall rules, locking down all ports except the essential 22 (SSH) and 443 (HTTPS). This created a secure environment, protecting my network from unauthorized access.</p>

<h4 id="nginx-the-gateway-and-guardian">Nginx: The Gateway and Guardian</h4>

<p>Finally, Nginx, the powerful web server, took center stage. It acted as the gateway, proxying traffic to my Rails application. Additionally, it handled SSL validation and encryption, ensuring secure communication between my website and visitors.</p>

<h2 id="challenges-conquered-triumph-earned">Challenges Conquered, Triumph Earned</h2>

<p>This network odyssey, though intricate, proved invaluable. I not only built a secure and scalable infrastructure but also broadened my technical expertise. From deciphering IP protocols to mastering network tools, the journey empowered me to face any future challenge with confidence.</p>

<p>Remember, this is just a glimpse of my experience. What challenges did you face in building your own projects? Share your stories in the comments below!</p>

<p>Looking back, the project was an emotional rollercoaster. The learning curve was steep, the road fraught with detours, but the sense of accomplishment is unparalleled. I not only built an e-commerce website but also transformed myself. Now, armed with Rails 7 expertise, design sensibilities, and infrastructure know-how, I’m ready to tackle any development challenge that comes my way.</p>

<p><strong>The Heartbreak of Payment Integrations</strong></p>

<p>Just as I felt I was getting the hang of things, another blow: Razorpay, my chosen payment gateway, stopped onboarding new merchants. Unfortunately payments is still pending.</p>

<h2 id="whats-next">What’s next</h2>

<p>There are a couple of things that need to be done.</p>

<p><em>First</em>, I need to write <code class="language-plaintext highlighter-rouge">IaC</code> to be able to host this easily on any cloud provider. Hosting it on my laptop was always a fun activity.
One of the main challenges here, is I have to backup system, it’s <em>one laptop</em> and a <em>single point of failure</em>.
It is also a hassle to keep the security certificates and system libraries updated.</p>

<p><em>Second</em>, I need to build some admin UI around this. Some boring ass CSV parser to upload products. And need to actually start sending emails
for password reset, :D
People need to be able to at least generate some bills. This also means one needs to be able to change the company name and some
other text, from configuration. Atleast for an MVP.</p>

<p><em>Third</em>, my own storefront hasn’t come to life yet, but I can maybe sell this product as a bundle to small scale businesses, and provide support
to them as a SaaS product, if needed.</p>

<p><code class="language-plaintext highlighter-rouge">Thank you.</code></p>]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[Going for a productive career break]]></summary></entry><entry><title type="html">News aggregator</title><link href="https://ikouchiha47.github.io/2024/01/11/building-news-aggregator.html" rel="alternate" type="text/html" title="News aggregator" /><published>2024-01-11T05:30:00+05:30</published><updated>2024-01-11T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/01/11/building-news-aggregator</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/01/11/building-news-aggregator.html"><![CDATA[<h1 id="news-aggregator-fetching-and-unifying-news-from-different-sources">News Aggregator: Fetching and Unifying News from Different Sources</h1>

<p>The task at hand was to create a service that aggregates news from different sources. Rather than making individual HTTP requests for each news provider, we opted for a more scalable and configurable approach. The solution involves using a YAML configuration file to specify different news sources, their endpoints, parameters, and the transformation rules for unifying the data.</p>

<h2 id="yaml-configuration">YAML Configuration</h2>

<p>The YAML configuration file outlines the news sources, their URLs, HTTP methods, parameters, and the rules for extracting relevant information. Let’s break down the key components:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">news</span><span class="pi">:</span>
  <span class="na">sources</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://api.marketaux.com/v1/news/all"</span>
      <span class="na">method</span><span class="pi">:</span> <span class="s">get</span>
      <span class="na">limit</span><span class="pi">:</span> <span class="m">10</span>
      <span class="na">params</span><span class="pi">:</span>
        <span class="na">api_token</span><span class="pi">:</span> 
        <span class="na">countries</span><span class="pi">:</span> <span class="s">in</span>
        <span class="na">filter_entities</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">limit</span><span class="pi">:</span> <span class="m">10</span>
        <span class="na">language</span><span class="pi">:</span> <span class="s">en</span>
      <span class="na">iterator</span><span class="pi">:</span> <span class="s">data</span>
      <span class="na">fields</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">author</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s1">'</span><span class="s">MarketAux'</span>
          <span class="na">static</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">provider</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">data.#.source</span>
          <span class="na">iter</span><span class="pi">:</span> <span class="kc">true</span>
          <span class="na">modifier</span><span class="pi">:</span> <span class="s2">"</span><span class="s">split(.)</span><span class="nv"> </span><span class="s">|&gt;</span><span class="nv"> </span><span class="s">first</span><span class="nv"> </span><span class="s">|&gt;</span><span class="nv"> </span><span class="s">lower</span><span class="nv"> </span><span class="s">|&gt;</span><span class="nv"> </span><span class="s">title"</span>
          <span class="na">datatype</span><span class="pi">:</span> <span class="s">string</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">title</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">data.#.title</span>
          <span class="na">iter</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">description</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">data.#.description</span>
          <span class="na">iter</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">url</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">data.#.url</span>
          <span class="na">iter</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">image_url</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">data.#.image_url</span>
          <span class="na">iter</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">content</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">data.#.description</span>
          <span class="na">iter</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="pi">-</span> <span class="na">key</span><span class="pi">:</span> <span class="s">published_at</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">data.#.published_at</span>
          <span class="na">iter</span><span class="pi">:</span> <span class="kc">true</span>

    <span class="pi">-</span> <span class="na">url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://newsapi.org/v2/everything"</span>
      <span class="na">limit</span><span class="pi">:</span> <span class="m">20</span>
      <span class="na">params</span><span class="pi">:</span>
        <span class="na">apiKey</span><span class="pi">:</span> 
        <span class="na">sources</span><span class="pi">:</span> <span class="s2">"</span><span class="s">the-hindu,the-times-of-india"</span>
        <span class="na">q</span><span class="pi">:</span> <span class="s">bank</span>
      <span class="na">iterator</span><span class="pi">:</span> <span class="s">articles</span>
      <span class="na">fields</span><span class="pi">:</span>
        <span class="c1"># ... (fields configuration)</span>
</code></pre></div></div>

<p>The configuration allows for multiple news sources, each with its own set of parameters and transformation rules.</p>

<p>The above YAML is used as a template, so that the <code class="language-plaintext highlighter-rouge">API Tokens</code> can be replaced during runtime, from config.</p>

<h2 id="go-code-implementation">Go Code Implementation</h2>

<p>The Go code for this News Aggregator is designed to be modular and extensible. Let’s look at some key components:</p>

<h3 id="structs-for-news-response">Structs for News Response</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">NewsResponse</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">Author</span>      <span class="kt">string</span> <span class="s">`json:"author"`</span>
	<span class="n">Provider</span>    <span class="kt">string</span> <span class="s">`json:"provider"`</span>
	<span class="n">Title</span>       <span class="kt">string</span> <span class="s">`json:"title"`</span>
	<span class="n">Description</span> <span class="kt">string</span> <span class="s">`json:"description"`</span>
	<span class="n">URL</span>         <span class="kt">string</span> <span class="s">`json:"url"`</span>
	<span class="n">ImageURL</span>    <span class="kt">string</span> <span class="s">`json:"image_url"`</span>
	<span class="n">Content</span>     <span class="kt">string</span> <span class="s">`json:"content"`</span>
	<span class="n">PublishedAt</span> <span class="kt">string</span> <span class="s">`json:"published_at"`</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This struct represents the unified format for news responses.</p>

<h3 id="news-aggregator-struct">News Aggregator Struct</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">NewsAggregator</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">News</span> <span class="n">RootObj</span> <span class="s">`yaml:"news"`</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">RootObj</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">Sources</span> <span class="p">[]</span><span class="n">Source</span> <span class="s">`yaml:"sources"`</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">Source</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">URL</span>      <span class="kt">string</span>                 <span class="s">`yaml:"url"`</span>
	<span class="n">Method</span>   <span class="kt">string</span>                 <span class="s">`yaml:"method"`</span>
	<span class="n">Limit</span>    <span class="kt">int</span>                    <span class="s">`yaml:"limit"`</span>
	<span class="n">Fields</span>   <span class="p">[]</span><span class="n">Fields</span>               <span class="s">`yaml:"fields"`</span>
	<span class="n">Params</span>   <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}</span> <span class="s">`yaml:"params,omitempty"`</span>
	<span class="n">Iterator</span> <span class="o">*</span><span class="kt">string</span>                <span class="s">`yaml:"iterator"`</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">NewsAggregator</code> struct mirrors the structure of the YAML configuration.</p>

<h3 id="fetching-and-parsing-news">Fetching and Parsing News</h3>

<p>The <code class="language-plaintext highlighter-rouge">NewsFetcher</code> and <code class="language-plaintext highlighter-rouge">NewsParser</code> structs handle fetching and parsing news from different sources. The <code class="language-plaintext highlighter-rouge">FetchNewsUsingConfig</code> function orchestrates the parallel fetching of news from multiple sources.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">NewsFetcher</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">Client</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Client</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">nf</span> <span class="o">*</span><span class="n">NewsFetcher</span><span class="p">)</span> <span class="n">Fetch</span><span class="p">(</span><span class="n">source</span> <span class="n">Source</span><span class="p">)</span> <span class="p">(</span><span class="n">response</span> <span class="kt">string</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">method</span> <span class="o">:=</span> <span class="n">source</span><span class="o">.</span><span class="n">Method</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">method</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">method</span> <span class="o">=</span> <span class="s">"get"</span>
	<span class="p">}</span>

	<span class="n">method</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="n">ToUpper</span><span class="p">(</span><span class="n">method</span><span class="p">)</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">URL</span><span class="p">)</span>

	<span class="n">req</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">NewRequest</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">URL</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"failed to build request to newsapi. Reason: %v </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">response</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">q</span> <span class="o">:=</span> <span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span>

	<span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">source</span><span class="o">.</span><span class="n">Params</span> <span class="p">{</span>
		<span class="n">q</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%v"</span><span class="p">,</span> <span class="n">value</span><span class="p">))</span>
	<span class="p">}</span>

	<span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span>

	<span class="n">b</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">httputil</span><span class="o">.</span><span class="n">DumpRequest</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="no">true</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">res</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">nf</span><span class="o">.</span><span class="n">Client</span><span class="o">.</span><span class="n">Do</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"failed to make request to newsapi. Reason: %v </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">response</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">res</span><span class="o">.</span><span class="n">Body</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

	<span class="n">body</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">io</span><span class="o">.</span><span class="n">ReadAll</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">Body</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"failed to make request to newsapi. Reason: %v </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">response</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">response</span> <span class="o">=</span> <span class="kt">string</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
	<span class="c">// log.Println("body ", bodyStr)</span>

	<span class="k">if</span> <span class="n">res</span><span class="o">.</span><span class="n">StatusCode</span> <span class="o">&gt;=</span> <span class="m">400</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">response</span><span class="p">,</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"http_request_failed"</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c">// log.Printf("response received %v\n", response)</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"response length "</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="p">))</span>
	<span class="k">return</span> <span class="n">response</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="parsemodifier-function"><code class="language-plaintext highlighter-rouge">ParseModifier</code> Function</h3>

<p>The <code class="language-plaintext highlighter-rouge">ParseModifier</code> function in the <code class="language-plaintext highlighter-rouge">NewsParser</code> struct is responsible for parsing the modifier provided in the YAML configuration. This function splits the modifier into different parts and identifies the functions that need to be applied during the data transformation.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">NewsParser</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">fetcher</span> <span class="n">Fetcher</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewNewsParser</span><span class="p">(</span><span class="n">fetcher</span> <span class="n">Fetcher</span><span class="p">)</span> <span class="o">*</span><span class="n">NewsParser</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">NewsParser</span><span class="p">{</span>
		<span class="n">fetcher</span><span class="o">:</span> <span class="n">fetcher</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="k">func</span> <span class="p">(</span><span class="n">np</span> <span class="o">*</span><span class="n">NewsParser</span><span class="p">)</span> <span class="n">ParseModifier</span><span class="p">(</span><span class="n">str</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="k">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">parts</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Split</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">"|&gt;"</span><span class="p">)</span>
	<span class="n">functions</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="k">interface</span><span class="p">{},</span> <span class="m">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">))</span>

	<span class="n">tFuncs</span> <span class="o">:=</span> <span class="n">NewTemplateFuncs</span><span class="p">()</span><span class="o">.</span><span class="n">Funcs</span><span class="p">()</span>

	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">tFuncs</span><span class="p">)</span>

	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">part</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">parts</span> <span class="p">{</span>
		<span class="n">part</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="n">TrimSpace</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>

		<span class="n">match</span> <span class="o">:=</span> <span class="n">regexp</span><span class="o">.</span><span class="n">MustCompile</span><span class="p">(</span><span class="s">`^(\w+)\((.*?)\)`</span><span class="p">)</span><span class="o">.</span><span class="n">FindStringSubmatch</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">match</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"1 airty function"</span><span class="p">)</span>

			<span class="n">f</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">tFuncs</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
			<span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
				<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"unknown function: %s"</span><span class="p">,</span> <span class="n">part</span><span class="p">)</span>
			<span class="p">}</span>

			<span class="n">functions</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">functions</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>

			<span class="k">continue</span>
		<span class="p">}</span>

		<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"2 airty function "</span><span class="p">,</span> <span class="n">match</span><span class="p">[</span><span class="m">1</span><span class="p">],</span> <span class="n">match</span><span class="p">[</span><span class="m">2</span><span class="p">])</span>
		<span class="n">f</span> <span class="o">:=</span> <span class="n">tFuncs</span><span class="p">[</span><span class="n">match</span><span class="p">[</span><span class="m">1</span><span class="p">]]</span>
		<span class="k">if</span> <span class="n">curryable</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="n">StrSliceable</span><span class="p">);</span> <span class="n">ok</span> <span class="p">{</span>
			<span class="n">functions</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">functions</span><span class="p">,</span> <span class="n">curryable</span><span class="p">(</span><span class="n">match</span><span class="p">[</span><span class="m">2</span><span class="p">]))</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"function %s is not curryable"</span><span class="p">,</span> <span class="n">match</span><span class="p">[</span><span class="m">1</span><span class="p">])</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">functions</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="data-retrieval-with-gjson">Data Retrieval with <code class="language-plaintext highlighter-rouge">gjson</code></h3>

<p>The <code class="language-plaintext highlighter-rouge">gjson</code> library is employed to parse the JSON response obtained from the news sources. The <code class="language-plaintext highlighter-rouge">ParseSource</code> function in the <code class="language-plaintext highlighter-rouge">NewsParser</code> struct utilizes <code class="language-plaintext highlighter-rouge">gjson</code> to retrieve the number of records based on the iterator and iterates over the fields, replacing <code class="language-plaintext highlighter-rouge">#</code> with the index to fetch the proper values.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">np</span> <span class="o">*</span><span class="n">NewsParser</span><span class="p">)</span> <span class="n">ParseSource</span><span class="p">(</span><span class="n">source</span> <span class="n">Source</span><span class="p">)</span> <span class="p">(</span><span class="n">ns</span> <span class="n">NewsResponseData</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Iterate over length</span>
	<span class="c">// For each field paramtere, if iter: true, then replace # with index</span>
	<span class="c">// Call gjson.Get on the item</span>
	<span class="c">// Build the struct and add to list of response</span>

	<span class="n">count</span> <span class="o">:=</span> <span class="n">gjson</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">bodyStr</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%s.#"</span><span class="p">,</span> <span class="n">iter</span><span class="p">))</span><span class="o">.</span><span class="n">Int</span><span class="p">()</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"count of data"</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>

	<span class="n">responses</span> <span class="o">:=</span> <span class="p">[]</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}{}</span>

	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="kt">int64</span><span class="p">(</span><span class="m">0</span><span class="p">);</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="m">1</span> <span class="p">{</span>
		<span class="n">nresp</span> <span class="o">:=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}{}</span>

		<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">field</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">source</span><span class="o">.</span><span class="n">Fields</span> <span class="p">{</span>
			<span class="k">if</span> <span class="n">field</span><span class="o">.</span><span class="n">Static</span> <span class="p">{</span>
				<span class="n">nresp</span><span class="p">[</span><span class="n">field</span><span class="o">.</span><span class="n">Key</span><span class="p">]</span> <span class="o">=</span> <span class="n">field</span><span class="o">.</span><span class="n">Value</span>
				<span class="k">continue</span>
			<span class="p">}</span>

			<span class="n">valueTpl</span> <span class="o">:=</span> <span class="n">field</span><span class="o">.</span><span class="n">Value</span>

			<span class="k">if</span> <span class="n">field</span><span class="o">.</span><span class="n">ShouldIter</span> <span class="o">&amp;&amp;</span> <span class="n">strings</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">valueTpl</span><span class="p">,</span> <span class="s">"#"</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">gjsonKey</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Replace</span><span class="p">(</span><span class="n">valueTpl</span><span class="p">,</span> <span class="s">"#"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">),</span> <span class="m">1</span><span class="p">)</span>
				<span class="n">nresp</span><span class="p">[</span><span class="n">field</span><span class="o">.</span><span class="n">Key</span><span class="p">]</span> <span class="o">=</span> <span class="n">gjson</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">bodyStr</span><span class="p">,</span> <span class="n">gjsonKey</span><span class="p">)</span><span class="o">.</span><span class="n">Value</span><span class="p">()</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="n">nresp</span><span class="p">[</span><span class="n">field</span><span class="o">.</span><span class="n">Key</span><span class="p">]</span> <span class="o">=</span> <span class="n">gjson</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">bodyStr</span><span class="p">,</span> <span class="n">valueTpl</span><span class="p">)</span><span class="o">.</span><span class="n">Value</span><span class="p">()</span>
			<span class="p">}</span>

			<span class="k">if</span> <span class="n">field</span><span class="o">.</span><span class="n">Modifier</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
				<span class="k">continue</span>
			<span class="p">}</span>

			<span class="n">value</span> <span class="o">:=</span> <span class="n">nresp</span><span class="p">[</span><span class="n">field</span><span class="o">.</span><span class="n">Key</span><span class="p">]</span>
			<span class="n">dataType</span> <span class="o">:=</span> <span class="n">field</span><span class="o">.</span><span class="n">DataType</span>
			<span class="k">if</span> <span class="n">dataType</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
				<span class="n">strType</span> <span class="o">:=</span> <span class="n">DataTypeString</span>
				<span class="n">dataType</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">strType</span>
			<span class="p">}</span>

			<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"response value %+v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

			<span class="c">// modify the initial value with the modifier</span>
			<span class="n">result</span> <span class="o">:=</span> <span class="n">value</span>

			<span class="k">switch</span> <span class="o">*</span><span class="n">dataType</span> <span class="p">{</span>
			<span class="k">case</span> <span class="n">DataTypeString</span><span class="o">:</span>
				<span class="n">funcs</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">np</span><span class="o">.</span><span class="n">ParseModifier</span><span class="p">(</span><span class="o">*</span><span class="n">field</span><span class="o">.</span><span class="n">Modifier</span><span class="p">)</span>
				<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
					<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"invalid data type. received %+v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
					<span class="k">return</span> <span class="n">ns</span><span class="p">,</span> <span class="n">err</span>
				<span class="p">}</span>

				<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">funcs</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
					<span class="n">f</span> <span class="o">:=</span> <span class="n">funcs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

					<span class="k">switch</span> <span class="n">f</span> <span class="o">:=</span> <span class="n">f</span><span class="o">.</span><span class="p">(</span><span class="k">type</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">case</span> <span class="n">StrSliceable</span><span class="o">:</span>
						<span class="c">// log.Printf("str sliceable %+v\n", result)</span>
						<span class="n">result</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="p">(</span><span class="kt">string</span><span class="p">))</span>
					<span class="k">case</span> <span class="k">func</span><span class="p">([]</span><span class="kt">string</span><span class="p">)</span> <span class="kt">string</span><span class="o">:</span>
						<span class="c">// log.Printf("str slice %+v\n", result)</span>
						<span class="n">result</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="p">([]</span><span class="kt">string</span><span class="p">))</span>
					<span class="k">case</span> <span class="k">func</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="kt">string</span><span class="o">:</span>
						<span class="c">// log.Printf("point string %+v\n", result)</span>
						<span class="n">result</span> <span class="o">=</span> <span class="n">f</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="p">(</span><span class="kt">string</span><span class="p">))</span>
					<span class="k">default</span><span class="o">:</span>
						<span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"failed to match modifier func type %#V</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
						<span class="k">return</span> <span class="n">ns</span><span class="p">,</span> <span class="n">ErrUndefinedModifier</span>
					<span class="p">}</span>
				<span class="p">}</span>

			<span class="k">default</span><span class="o">:</span>
				<span class="k">return</span> <span class="n">ns</span><span class="p">,</span> <span class="n">ErrUnsupportedDataType</span>
			<span class="p">}</span>

			<span class="n">nresp</span><span class="p">[</span><span class="n">field</span><span class="o">.</span><span class="n">Key</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
		<span class="p">}</span>

		<span class="n">responses</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">responses</span><span class="p">,</span> <span class="n">nresp</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">ns</span><span class="o">.</span><span class="n">Source</span> <span class="o">=</span> <span class="n">source</span>
	<span class="n">ns</span><span class="o">.</span><span class="n">Responses</span> <span class="o">=</span> <span class="n">responses</span>

	<span class="k">return</span> <span class="n">ns</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="fetchnewsfromconfig-function-to-get-news"><code class="language-plaintext highlighter-rouge">FetchNewsFromConfig</code> function to get news</h3>

<p>This fetches the news from multiple sources in parallel. Although we could have had a list of workers</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="p">(</span><span class="n">np</span> <span class="o">*</span><span class="n">NewsParser</span><span class="p">)</span> <span class="n">FetchNewsUsingConfig</span><span class="p">(</span>
	<span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span>
	<span class="n">fileName</span> <span class="kt">string</span><span class="p">,</span>
	<span class="n">data</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{},</span>
<span class="p">)</span> <span class="p">([]</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">tmpl</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">template</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"newsources.yaml"</span><span class="p">)</span><span class="o">.</span><span class="n">ParseFiles</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">var</span> <span class="n">buffer</span> <span class="n">bytes</span><span class="o">.</span><span class="n">Buffer</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">tmpl</span><span class="o">.</span><span class="n">Execute</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"failed to execute template"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">ns</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">NewsAggregator</span><span class="p">{}</span>

	<span class="n">err</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="n">buffer</span><span class="o">.</span><span class="n">Bytes</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">ns</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>


    <span class="c">// Create n waitgroups where n = number of news sources</span>
	<span class="k">var</span> <span class="n">wg</span> <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>
	<span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ns</span><span class="o">.</span><span class="n">News</span><span class="o">.</span><span class="n">Sources</span><span class="p">))</span>

	<span class="k">var</span> <span class="n">responsesChan</span> <span class="o">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">NewsResponseData</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ns</span><span class="o">.</span><span class="n">News</span><span class="o">.</span><span class="n">Sources</span><span class="p">))</span>

	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">source</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">ns</span><span class="o">.</span><span class="n">News</span><span class="o">.</span><span class="n">Sources</span> <span class="p">{</span>
		<span class="k">go</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="o">*</span><span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span><span class="p">,</span> <span class="n">src</span> <span class="n">Source</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">defer</span> <span class="n">w</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>
			<span class="n">resp</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">np</span><span class="o">.</span><span class="n">ParseSource</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
			<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
				<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"failed to fetch news from source "</span><span class="p">,</span> <span class="n">src</span><span class="o">.</span><span class="n">URL</span><span class="p">)</span>
				<span class="k">return</span>
			<span class="p">}</span>

			<span class="n">responsesChan</span> <span class="o">&lt;-</span> <span class="n">resp</span>
		<span class="p">}(</span><span class="o">&amp;</span><span class="n">wg</span><span class="p">,</span> <span class="n">source</span><span class="p">)</span>
	<span class="p">}</span>

    <span class="c">// Wait for all the responses to complete </span>
	<span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
	<span class="nb">close</span><span class="p">(</span><span class="n">responsesChan</span><span class="p">)</span>

	<span class="n">responses</span> <span class="o">:=</span> <span class="p">[]</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}{}</span>

    <span class="c">// Aggregate all the responses and put it inside responses</span>
	<span class="k">for</span> <span class="n">resps</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">responsesChan</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">resps</span><span class="o">.</span><span class="n">Responses</span><span class="p">),</span> <span class="s">" news items received from"</span><span class="p">,</span> <span class="n">resps</span><span class="o">.</span><span class="n">Source</span><span class="o">.</span><span class="n">URL</span><span class="p">)</span>
		<span class="n">responses</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">responses</span><span class="p">,</span> <span class="n">resps</span><span class="o">.</span><span class="n">Responses</span><span class="o">...</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">responses</span><span class="p">),</span> <span class="s">" total news received"</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">responses</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now you can use a cache to store the response data. You can set the cache expiry based on the <code class="language-plaintext highlighter-rouge">limit</code> in the config yaml file.</p>

<h2 id="conclusion">Conclusion</h2>

<p>This News Aggregator provides a flexible and scalable solution for fetching and unifying news from diverse sources. The YAML configuration allows for easy customization, making it adaptable to various use cases. The Go code’s modular design ensures maintainability and extensibility, enabling future enhancements and feature additions.</p>

<p>By centralizing news from different sources into a unified format, users can effortlessly access a curated stream of information. This News Aggregator serves as a foundation for creating more sophisticated news aggregation services tailored to specific needs and preferences.</p>

<p><code class="language-plaintext highlighter-rouge">Thank you</code></p>]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[Building a news aggregator in go]]></summary></entry><entry><title type="html">Automate deployment with CI/CD</title><link href="https://ikouchiha47.github.io/2024/01/11/ci-cd-with-gitlab-aws.html" rel="alternate" type="text/html" title="Automate deployment with CI/CD" /><published>2024-01-11T05:30:00+05:30</published><updated>2024-01-11T05:30:00+05:30</updated><id>https://ikouchiha47.github.io/2024/01/11/ci-cd-with-gitlab-aws</id><content type="html" xml:base="https://ikouchiha47.github.io/2024/01/11/ci-cd-with-gitlab-aws.html"><![CDATA[<h1 id="streamlining-infrastructure-management-with-iac">Streamlining Infrastructure Management with IaC</h1>

<p>In the world of cloud computing, managing infrastructure can be a complex and time-consuming task. Manual configuration and provisioning can lead to inconsistencies, errors, and delays. Infrastructure as Code (IaC) provides a solution by allowing you to define your infrastructure using code, enabling version control, automated deployments, and consistent environments.</p>

<p>Our IaC Journey with Terraform</p>

<p>We recently embarked on an IaC journey to streamline our deployment processes for multiple services within the Newsaggregator ecosystem. Here’s a breakdown of our approach:</p>

<h2 id="repositories-for-code-and-infrastructure">Repositories for Code and Infrastructure:</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">app-server</code>: Houses the server code.</li>
  <li><code class="language-plaintext highlighter-rouge">app-base-infra</code>: Contains code for setting up IAM, networking, and other foundational infrastructure.</li>
  <li><code class="language-plaintext highlighter-rouge">app-metals-infra</code>: Manages services using ASGs, EC2 instances, S3, Lambda, and more.</li>
</ul>

<h2 id="terraform-for-infrastructure-definition">Terraform for Infrastructure Definition:</h2>

<p>We chose <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_template#network-interfaces">Terraform</a> as our IaC tool for its ease of use, comprehensive AWS support, and strong community. Terraform scripts define our infrastructure components, including:</p>

<ul>
  <li>IAM policies, roles, and users</li>
  <li>VPCs, subnets, and security groups</li>
  <li>Route53 records</li>
  <li>ACM certificates</li>
  <li>ECS tasks with autoscaling groups and load balancers</li>
  <li>S3 buckets</li>
  <li>Lambda functions</li>
</ul>

<h2 id="gitlab-ci-for-automated-pipelines">GitLab CI for Automated Pipelines:</h2>

<p>GitLab CI orchestrates our pipeline processes:</p>

<ul>
  <li>app-server CI pipeline:
    <ul>
      <li>Builds Docker images</li>
      <li>Tags images with commit hashes</li>
      <li>Uploads images to ECR</li>
      <li>Updates version numbers in SSM parameters</li>
    </ul>
  </li>
  <li>app-base-infra CD pipeline:
    <ul>
      <li>Sets up IAM, networking, and other foundational infrastructure</li>
    </ul>
  </li>
  <li>app-metals-infra CD pipeline:
`-Deploys ECS tasks, ASGs, load balancers and connects to cluster</li>
</ul>

<p>Secure AWS Credentials:</p>

<ul>
  <li>AWS access keys and secrets are stored as pipeline variables, ensuring security.</li>
</ul>

<p>For gitlab, you can chose the <em>Protected</em> and <em>Mask</em> checkboxes, to make those variables available
only in <em>protected</em> branches. (Check Branch protection rules in your gitlab ci setting)</p>

<h2 id="benefits-of-our-iac-implementation">Benefits of Our IaC Implementation:</h2>

<ul>
  <li>Automation: Eliminates manual configuration and provisioning.</li>
  <li>Consistency: Ensures identical environments across deployments.</li>
  <li>Version control: Tracks changes and enables rollbacks.</li>
  <li>Auditability: Provides clear history of infrastructure changes.</li>
  <li>Scalability: Facilitates easy infrastructure expansion.</li>
</ul>

<p>Next Steps:</p>

<ul>
  <li>Pipeline YAML sharing: We’ll share our pipeline YAML configurations for transparency and collaboration.</li>
  <li>ChatGPT integration: We’ll continue exploring ChatGPT’s potential for further automating policy creation and other tasks.</li>
</ul>

<h3 id="app-server-iaac-setup"><code class="language-plaintext highlighter-rouge">app-server</code> IaaC setup</h3>

<p>For our <code class="language-plaintext highlighter-rouge">app-server/.gitlab-ci.yaml</code>,these are the steps we take:</p>
<ul>
  <li>create iam role with access to <code class="language-plaintext highlighter-rouge">push pull images from ecr</code> and <code class="language-plaintext highlighter-rouge">ssm:GetParameters</code>, <code class="language-plaintext highlighter-rouge">ssm:PutParameter</code></li>
  <li>create the image from our <code class="language-plaintext highlighter-rouge">Dockerfile</code></li>
  <li>The docker <code class="language-plaintext highlighter-rouge">tag</code> is of the format <code class="language-plaintext highlighter-rouge">${APP_NAME}:${CI_COMMIT_SHORT_SHA}</code>.</li>
  <li>push it into the <code class="language-plaintext highlighter-rouge">ECR</code>.</li>
  <li>update the <code class="language-plaintext highlighter-rouge">SSM Param</code> with the <code class="language-plaintext highlighter-rouge">docker tag</code></li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">SSM Param</code> is of the format <code class="language-plaintext highlighter-rouge">/${ENVIRONMENT}/${APP_NAME}/apiserver/version</code></p>

<p>CI variables to set:</p>
<ul>
  <li>AWS_DEFAULT_REGION</li>
  <li>AWS_ACCOUNT</li>
  <li>AWS_ACCESS_KEY_ID</li>
  <li>AWS_SECRET_ACCESS_KEY</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">.gitlab-ci.yaml</code></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="na">variables</span><span class="pi">:</span>
  <span class="na">DOCKER_REGISTRY</span><span class="pi">:</span> <span class="s">${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"</span>
  <span class="na">DOCKER_APP_TAG</span><span class="pi">:</span> <span class="s">${APP_NAME}:${CI_COMMIT_SHA:0:6}</span> 
  <span class="na">DOCKER_HOST</span><span class="pi">:</span> <span class="s">tcp://docker:2375</span>
  <span class="na">APP_NAME</span><span class="pi">:</span> <span class="s">talon-server</span>

<span class="na">publish prod</span><span class="pi">:</span>
  <span class="na">variables</span><span class="pi">:</span>
    <span class="na">ENVIRONMENT</span><span class="pi">:</span> <span class="s">prod</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">if</span><span class="pi">:</span> <span class="s1">'</span><span class="s">$CI_COMMIT_REF_NAME</span><span class="nv"> </span><span class="s">==</span><span class="nv"> </span><span class="s">"master"'</span>
  <span class="na">image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">amazon/aws-cli:2.15.15</span>
    <span class="na">entrypoint</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">"</span><span class="pi">]</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:dind</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">amazon-linux-extras install docker</span>
    <span class="pi">-</span> <span class="s">aws --version</span>
    <span class="pi">-</span> <span class="s">docker --version</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">echo ${AWS_PROFILE}</span>
    <span class="pi">-</span> <span class="s">echo ${AWS_DEFAULT_REGION}</span>
    <span class="pi">-</span> <span class="s">echo $CI_COMMIT_SHORT_SHA</span>
    <span class="pi">-</span> <span class="s">aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID</span>
    <span class="pi">-</span> <span class="s">aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY</span>
    <span class="pi">-</span> <span class="s">aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin "${AWS_ACCOUNT}.dkr.${AWS_DEFAULT_REGION}.amazonaws.com"</span>
    <span class="pi">-</span> <span class="s">docker build --platform linux/amd64  -t "talon-server:$CI_COMMIT_SHORT_SHA" .</span>
    <span class="pi">-</span> <span class="s">docker tag "${APP_NAME}:$CI_COMMIT_SHORT_SHA" "${AWS_ACCOUNT}.dkr.ecr.ap-south-1.amazonaws.com/talon-server:$CI_COMMIT_SHORT_SHA"</span>
    <span class="pi">-</span> <span class="s">docker push "${AWS_ACCOUNT}.dkr.ecr.ap-south-1.amazonaws.com/${APP_NAME}:$CI_COMMIT_SHORT_SHA"</span>
    <span class="pi">-</span> <span class="s">aws ssm put-parameter --name "/${ENVIRONMENT}/${APP_NAME}/apiserver/version" --value "${APP_NAME}:${CI_COMMIT_SHORT_SHA}" --type String --overwrite</span>

</code></pre></div></div>

<p>The Policy for Gitlab looks like:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"ecr:GetAuthorizationToken"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ecr:GetDownloadUrlForLayer"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ecr:DescribeRepositories"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ecr:ListImages"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ecr:DescribeImages"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ecr:ListTagsForResource"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ecr:DescribeImageScanFindings"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ecr:PutImage"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ssm:GetParameters"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ssm:PutParameter"</span><span class="p">,</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">SSM Param</code> allows the <code class="language-plaintext highlighter-rouge">CD</code> pipeline to determine which image to deploy. We are going to see later.</p>

<p>For the Networking setup and creating IAM roles for ECS to run our sever, I have decided to use a separate repository. In order to run our
terraform scripts, we need to be able to store the <code class="language-plaintext highlighter-rouge">terraform states</code> to s3. So we need to create a <code class="language-plaintext highlighter-rouge">bucket</code> in <code class="language-plaintext highlighter-rouge">S3</code>.</p>

<h3 id="app-base-infra-for-core-setup"><code class="language-plaintext highlighter-rouge">app-base-infra</code> for core setup</h3>

<blockquote>
  <p>A word about the setup. Presently in terraform, a <code class="language-plaintext highlighter-rouge">hcl</code> file is used to generate the backend config.</p>

</blockquote>

<p>We follow the same way to setup the <code class="language-plaintext highlighter-rouge">CI</code> variables.</p>

<p><code class="language-plaintext highlighter-rouge">.gitlab-ci.yaml</code></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">validate</span>
  <span class="pi">-</span> <span class="s">deploy</span>
  <span class="pi">-</span> <span class="s">destroy</span>

<span class="na">.template</span><span class="pi">:</span>
  <span class="na">image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">hashicorp/terraform:1.7.1</span>
    <span class="na">entrypoint</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">"</span><span class="pi">]</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">apk add --no-cache bash py-pip</span>
    <span class="pi">-</span> <span class="s">python3 -m venv .venv</span>
    <span class="pi">-</span> <span class="s">source .venv/bin/activate</span>
    <span class="pi">-</span> <span class="s">pip install --upgrade pip awscli</span>
    <span class="pi">-</span> <span class="s">aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID</span>
    <span class="pi">-</span> <span class="s">aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_AWS_ACCOUNT=${AWS_ACCOUNT}</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_AWS_REGION=${AWS_DEFAULT_REGION}</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_AWS_PROFILE=${AWS_DEFAULT_PROFILE}</span>
    <span class="pi">-</span> <span class="s">export AWS_PROFILE=${AWS_DEFAULT_PROFILE}</span>


<span class="na">validate infra</span><span class="pi">:</span>
  <span class="na">extends</span><span class="pi">:</span> <span class="s">.template</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">validate</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_APP_NAME=talon-server</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_PARAM_PREFIX=talon/apiserver</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_ENVIRONMENT=prod</span>
    <span class="pi">-</span> <span class="s">terraform init -backend-config=./infra.hcl</span>
    <span class="pi">-</span> <span class="s">terraform validate</span>
  <span class="na">when</span><span class="pi">:</span> <span class="s">manual</span>


<span class="na">create infra</span><span class="pi">:</span>
  <span class="na">extends</span><span class="pi">:</span> <span class="s">.template</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">apply</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_APP_NAME=talon-server</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_PARAM_PREFIX=talon/apiserver</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_ENVIRONMENT=prod</span>
    <span class="pi">-</span> <span class="s">export AWS_PROFILE=${AWS_DEFAULT_PROFILE}</span>
    <span class="pi">-</span> <span class="s">terraform plan -out=infra.plan</span>
    <span class="pi">-</span> <span class="s">terraform apply -auto-approve infra.tfplan</span>
  <span class="na">when</span><span class="pi">:</span> <span class="s">manual</span>


<span class="na">destroy infra</span><span class="pi">:</span>
  <span class="na">extends</span><span class="pi">:</span> <span class="s">.template</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">destroy</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_APP_NAME=talon-server</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_PARAM_PREFIX=talon/apiserver</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_ENVIRONMENT=prod</span>
    <span class="pi">-</span> <span class="s">terraform init -backend-config=./infra.hcl</span>
    <span class="pi">-</span> <span class="s">terraform destroy -auto-approve</span>
  <span class="na">when</span><span class="pi">:</span> <span class="s">manual</span>
</code></pre></div></div>

<p>Here, I have made a few considerations.</p>

<p><code class="language-plaintext highlighter-rouge">First</code>, generally in most blogs, the <code class="language-plaintext highlighter-rouge">validate &amp; plan</code> are in one stage, storing the <code class="language-plaintext highlighter-rouge">terraform plan</code> file in artifcat or cache in gitlab.
This causes a security concern, because the <code class="language-plaintext highlighter-rouge">plan</code> file is not like an <code class="language-plaintext highlighter-rouge">ansible vault</code>, its not encrypted. So, I have separated the stages.
Its, <code class="language-plaintext highlighter-rouge">validate</code>, followed by <code class="language-plaintext highlighter-rouge">plan &amp; apply</code>.</p>

<p><code class="language-plaintext highlighter-rouge">Second</code>, for multiple stages, the <code class="language-plaintext highlighter-rouge">TF_VAR_ENVIRONMENT</code> needs to changes, and we can add another bunch of stages. For multiple applications.
There would be more such entries.</p>

<p><code class="language-plaintext highlighter-rouge">Third</code>, Presently, the <code class="language-plaintext highlighter-rouge">infra.hcl</code> file has static values, but there is a workaround to make this dynamic using
environment variables, or <code class="language-plaintext highlighter-rouge">TF_VAR</code> variables or using a bash script to dynamically populate the hcl file.</p>

<p>This kind of begs the question of what happens, when the number of microservices increases.</p>
<blockquote>
  <p>I will come back to this later.</p>
</blockquote>

<h3 id="app-metals-infra-for-ecs-ags-lambda-rds-etc"><code class="language-plaintext highlighter-rouge">app-metals-infra</code> for ecs, ags, lambda, rds etc.</h3>

<p>The setup is exactly same as above. Except here, we follow a directory for each kind of deployment. Presently, the <code class="language-plaintext highlighter-rouge">services</code> directory will
host the IaaC code for running all <code class="language-plaintext highlighter-rouge">EC2</code> or <code class="language-plaintext highlighter-rouge">FARGET</code> backed instances/deployments.</p>

<p>This is like a <code class="language-plaintext highlighter-rouge">Monorepo</code> with sub-directories.</p>

<p><code class="language-plaintext highlighter-rouge">.gitlab-ci.yaml</code> looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">validate</span>
  <span class="pi">-</span> <span class="s">deploy</span>
  <span class="pi">-</span> <span class="s">destroy</span>

<span class="na">.template</span><span class="pi">:</span>
  <span class="na">image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">hashicorp/terraform:1.7.1</span>
    <span class="na">entrypoint</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">"</span><span class="pi">]</span>
  <span class="na">before_script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">apk add --no-cache bash py-pip</span>
    <span class="pi">-</span> <span class="s">python3 -m venv .venv</span>
    <span class="pi">-</span> <span class="s">source .venv/bin/activate</span>
    <span class="pi">-</span> <span class="s">pip install --upgrade pip awscli</span>
    <span class="pi">-</span> <span class="s">aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID</span>
    <span class="pi">-</span> <span class="s">aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_AWS_ACCOUNT=${AWS_ACCOUNT}</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_AWS_REGION=${AWS_DEFAULT_REGION}</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_AWS_PROFILE=${AWS_DEFAULT_PROFILE}</span>


<span class="na">validate</span><span class="pi">:</span>
  <span class="na">extends</span><span class="pi">:</span> <span class="s">.template</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">validate</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_APP_NAME=talon-server</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_PARAM_PREFIX=talon/apiserver</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_ENVIRONMENT=prod</span>
    <span class="pi">-</span> <span class="s">cd services</span>
    <span class="pi">-</span> <span class="s">terraform init -backend-config=./talon.hcl</span>
    <span class="pi">-</span> <span class="s">terraform validate</span>

<span class="na">deploy talon server</span><span class="pi">:</span>
  <span class="na">extends</span><span class="pi">:</span> <span class="s">.template</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_APP_NAME=talon-server</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_PARAM_PREFIX=talon/apiserver</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_ENVIRONMENT=prod</span>
    <span class="pi">-</span> <span class="s">cd services</span>
    <span class="pi">-</span> <span class="s">terraform init -backend-config=./talon.hcl</span>
    <span class="pi">-</span> <span class="s">terraform plan -out=talon.tfplan</span>
    <span class="pi">-</span> <span class="s">terraform apply -auto-approve talon.tfplan</span>
  <span class="na">when</span><span class="pi">:</span> <span class="s">manual</span>

<span class="na">destroy talon sever</span><span class="pi">:</span>
  <span class="na">extends</span><span class="pi">:</span> <span class="s">.template</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">destroy</span>
  <span class="na">variables</span><span class="pi">:</span>
    <span class="na">TF_ROOT</span><span class="pi">:</span> <span class="s">services</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_APP_NAME=talon-server</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_PARAM_PREFIX=talon/apiserver</span>
    <span class="pi">-</span> <span class="s">export TF_VAR_ENVIRONMENT=prod</span>
    <span class="pi">-</span> <span class="s">cd services</span>
    <span class="pi">-</span> <span class="s">terraform init -backend-config=./talon.hcl</span>
    <span class="pi">-</span> <span class="s">terraform destroy -auto-approve</span>
  <span class="na">when</span><span class="pi">:</span> <span class="s">manual</span>


</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">hcl</code> config files looks like this:</p>

<div class="language-hcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">bucket</span> <span class="err">=</span> <span class="s2">"app-tfstates"</span>
<span class="nx">key</span>    <span class="err">=</span> <span class="s2">"prod/app/infra/terraform.tfstate"</span>
<span class="nx">region</span> <span class="err">=</span> <span class="s2">"ap-south-1"</span>
</code></pre></div></div>

<h2 id="user-role-creation-with-chatgpt">User Role Creation with ChatGPT:</h2>

<p>In order to execute all these commands, we need proper <code class="language-plaintext highlighter-rouge">Roles</code> setup. Now we could do this, by I don’t know, “reading”.</p>

<p>But why do that, when we can just <strong>crash and burn baby</strong>. I’ve streamlined user creation with ChatGPT:</p>

<ul>
  <li>Create a user with basic permissions.</li>
  <li>Run the pipeline and capture access-related error messages.</li>
  <li>Feed those messages to ChatGPT, which automatically generates the required inline JSON policy.</li>
</ul>

<p>The list is quite big, you can figure that out on your own.</p>

<h2 id="bonus">Bonus</h2>

<p>Here is a bonus script, for your local development, a wrapper around <code class="language-plaintext highlighter-rouge">terraform</code> cli, so that you don’t need to export <code class="language-plaintext highlighter-rouge">TF_VAR</code>s.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># This is a wrapper around terraform to run commands with</span>
<span class="c"># project specific config</span>
<span class="c">#</span>
<span class="c"># USAGE: to use this, first call</span>
<span class="c"># source ./scripts/terrawrapper.sh load-env &lt;env-file&gt;</span>
<span class="c"># ./scripts/terrwrapper &lt;terraform commands&gt;</span>
<span class="c">#</span>
<span class="nb">export </span><span class="nv">AWS_PROFILE</span><span class="o">=</span><span class="s2">"app"</span>

<span class="k">function </span>set_envfile<span class="o">()</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"env file name not provided"</span>
  <span class="k">fi

  </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
  <span class="nb">export </span><span class="nv">_TF_ENVFILE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>

<span class="k">function </span>aws_account_id<span class="o">()</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">[[</span> <span class="o">!</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">AWS_ACCOUNT_ID</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">AWS_ACCOUNT_ID</span><span class="k">}</span><span class="s2"> aws account id already set"</span>
  <span class="k">else
    </span><span class="nv">value</span><span class="o">=</span><span class="si">$(</span>aws sts <span class="se">\</span>
      get-caller-identity <span class="se">\</span>
      <span class="nt">--query</span> <span class="s2">"Account"</span> <span class="se">\</span>
      <span class="nt">--output</span> text <span class="se">\</span>
      <span class="nt">--profile</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">AWS_PROFILE</span><span class="k">}</span><span class="s2">"</span><span class="se">\</span>
    <span class="si">)</span>
        <span class="nb">export </span><span class="nv">AWS_ACCOUNT_ID</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">value</span><span class="k">}</span><span class="s2">"</span>
  <span class="k">fi</span>
<span class="o">}</span>

<span class="k">function </span>load_env<span class="o">()</span> <span class="o">{</span>
  <span class="nv">file</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">_TF_ENVFILE</span><span class="k">}</span><span class="s2">"</span>

  <span class="k">if</span> <span class="o">[[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"_TF_ENVFILE variable needs to be set"</span>
    <span class="nb">exit </span>1
  <span class="k">fi</span>

  <span class="c"># echo "laoding from $file"</span>

  <span class="nb">declare</span> <span class="nt">-a</span> env_vars

  <span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> line<span class="p">;</span> <span class="k">do
    </span><span class="nv">exported_var</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | envsubst<span class="si">)</span>
    <span class="c"># echo "Exported Variable: $exported_var"</span>
    env_vars+<span class="o">=(</span><span class="s2">"</span><span class="nv">$exported_var</span><span class="s2">"</span><span class="o">)</span>
  <span class="k">done</span> &lt; &lt;<span class="o">(</span><span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'^#'</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span><span class="o">)</span>

  <span class="nb">export</span> <span class="s2">"</span><span class="k">${</span><span class="nv">env_vars</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span>
  
  <span class="c"># echo "profile $TF_VAR_AWS_PROFILE"</span>
  <span class="c"># echo "app name $TF_VAR_APP_NAME" </span>
  <span class="c"># echo "env values exported"</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"load-env"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"setting env file"</span>
  set_envfile <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
  <span class="nb">echo</span> <span class="s2">"ENVFILE set to </span><span class="k">${</span><span class="nv">_TF_ENVFILE</span><span class="k">}</span><span class="s2">"</span>
<span class="k">elif</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"get-env"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"ENVFILE set to </span><span class="k">${</span><span class="nv">_TF_ENVFILE</span><span class="k">}</span><span class="s2">"</span>
<span class="k">else
  </span>aws_account_id
  load_env

  <span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$TF_VAR_AWS_ACCOUNT</span><span class="s2">"</span> <span class="o">||</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$TF_VAR_APP_NAME</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
      </span><span class="nb">echo</span> <span class="s2">"env values not exported"</span>
      <span class="nb">exit </span>1
  <span class="k">fi

  </span>terraform <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
<span class="k">fi</span>
</code></pre></div></div>

<h2 id="backword">Backword</h2>

<p>IaC has proven to be a valuable tool for streamlining our deployment processes and improving infrastructure management. I’m excited to continue refining our approach and sharing our experiences with the community.</p>

<p><code class="language-plaintext highlighter-rouge">Thank you.</code></p>]]></content><author><name>ikouchiha47</name></author><summary type="html"><![CDATA[Setting up ci/cd on gitlab and automate deployment with terraform]]></summary></entry></feed>